// schema.prisma

generator client {
  provider        = "prisma-client"
  output          = "./generated"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "postgresql"
  // IMPORTANT: Use shadow database URL for Prisma CLI operations
  // Assuming a standard environment variable for the main connection
  url      = env("DB_URL")
  // Uncomment the line below if SHADOW_DB_URL is specifically required for migrations
  // shadowDatabaseUrl = env("SHADOW_DB_UR") 
}

// -----------------------------------------------------------
// 1. Core User Model (UPDATED)
// -----------------------------------------------------------

model users {
  id             BigInt    @id @default(autoincrement())
  email          String    @unique @db.Text
  name           String    @db.Text
  created_at     DateTime  @default(now()) @db.Timestamptz(6)

  // -- NEW ADDRESS FIELDS --
  address_line1  String?   @db.Text
  address_line2  String?   @db.Text
  city           String?   @db.Text
  state_province String?   @db.Text
  postal_code    String?   @db.Text
  country        String?   @db.Text
  phone          String?   @db.Text
  // -------------------------

  // Relationships
  cart_items cart_items[]
  orders     orders[]

  @@map("users")
}

// -----------------------------------------------------------
// 2. Product Catalog Models (NO CHANGE)
// -----------------------------------------------------------

model brands {
  id          BigInt     @id @default(autoincrement())
  name        String     @unique @db.Text
  description String?    @db.Text
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  fragrances  fragrances[]

  @@map("brands")
}

model fragrances {
  id                    BigInt @id @default(autoincrement())
  brand_id              BigInt
  name                  String @db.Text
  description           String? @db.Text
  scent_family          String? @db.Text
  top_notes             String? @db.Text
  middle_notes          String? @db.Text
  base_notes            String? @db.Text
  image_url             String? @db.Text
  created_at            DateTime @default(now()) @db.Timestamptz(6)

  // Relationships
  brand                 brands   @relation(fields: [brand_id], references: [id])
  fragrance_decant_prices fragrance_decant_prices[]
  cart_items            cart_items[]
  order_items           order_items[]
  guest_order_items     guest_order_items[] // New related model
  guest_cart_items      guest_cart_items[]  // New related model

  @@map("fragrances")
}

model decant_sizes {
  id                    BigInt @id @default(autoincrement())
  size_ml               Int    @unique
  label                 String @db.Text

  // Relationships
  fragrance_decant_prices fragrance_decant_prices[]
  cart_items            cart_items[]
  order_items           order_items[]
  guest_order_items     guest_order_items[] // New related model
  guest_cart_items      guest_cart_items[]  // New related model

  @@map("decant_sizes")
}

model fragrance_decant_prices {
  id             BigInt @id @default(autoincrement())
  fragrance_id   BigInt
  decant_size_id BigInt
  price          Float  @db.DoublePrecision

  // Relationships
  fragrance      fragrances   @relation(fields: [fragrance_id], references: [id])
  decant_size    decant_sizes @relation(fields: [decant_size_id], references: [id])

  @@unique([fragrance_id, decant_size_id])
  @@map("fragrance_decant_prices")
}

// -----------------------------------------------------------
// 3. E-commerce Models (NO CHANGE)
// -----------------------------------------------------------

model cart_items {
  id             BigInt @id @default(autoincrement())
  user_id        BigInt
  fragrance_id   BigInt
  decant_size_id BigInt
  quantity       Int    @default(1)
  created_at     DateTime @default(now()) @db.Timestamptz(6)

  // Relationships
  user           users        @relation(fields: [user_id], references: [id])
  fragrance      fragrances   @relation(fields: [fragrance_id], references: [id])
  decant_size    decant_sizes @relation(fields: [decant_size_id], references: [id])

  @@unique([user_id, fragrance_id, decant_size_id])
  @@map("cart_items")
}

model orders {
  id           BigInt   @id @default(autoincrement())
  user_id      BigInt
  total_amount Float    @db.DoublePrecision
  status       String   @default("pending") @db.Text
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  // Relationships
  user         users     @relation(fields: [user_id], references: [id])
  order_items  order_items[]

  @@map("orders")
}

model order_items {
  id             BigInt @id @default(autoincrement())
  order_id       BigInt
  fragrance_id   BigInt
  decant_size_id BigInt
  quantity       Int
  price_per_item Float  @db.DoublePrecision

  // Relationships
  order          orders       @relation(fields: [order_id], references: [id])
  fragrance      fragrances   @relation(fields: [fragrance_id], references: [id])
  decant_size    decant_sizes @relation(fields: [decant_size_id], references: [id])

  @@map("order_items")
}

// -----------------------------------------------------------
// 4. Guest/Session Models (NEW)
// -----------------------------------------------------------

model guest_orders {
  id                      BigInt    @id @default(autoincrement())
  session_id              String    @db.Text
  email                   String    @db.Text
  address_line1           String    @db.Text
  address_line2           String?   @db.Text
  city                    String    @db.Text
  state_province          String    @db.Text
  postal_code             String    @db.Text
  country                 String    @db.Text
  phone                   String?   @db.Text
  total_amount            Float     @db.DoublePrecision
  status                  String    @default("pending") @db.Text
  save_details_for_account Boolean  @default(false)
  created_at              DateTime  @default(now()) @db.Timestamptz(6)
  updated_at              DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  guest_order_items       guest_order_items[]

  @@index([session_id], name: "idx_guest_orders_session_id")
  @@index([email], name: "idx_guest_orders_email")
  @@index([status], name: "idx_guest_orders_status")
  @@map("guest_orders")
}

model guest_order_items {
  id             BigInt @id @default(autoincrement())
  guest_order_id BigInt
  fragrance_id   BigInt
  decant_size_id BigInt
  quantity       Int
  price_per_item Float  @db.DoublePrecision

  guest_order    guest_orders @relation(fields: [guest_order_id], references: [id], onDelete: Cascade)
  fragrance      fragrances   @relation(fields: [fragrance_id], references: [id])
  decant_size    decant_sizes @relation(fields: [decant_size_id], references: [id])

  @@index([guest_order_id], name: "idx_guest_order_items_guest_order_id")
  @@map("guest_order_items")
}

model cart_sessions {
  id         BigInt    @id @default(autoincrement())
  session_id String    @unique @db.Text // This is still the unique identifier
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamptz(6)

  // The relation field, pointing to the dedicated FK on the other model
  guest_cart_items guest_cart_items[] 

  @@map("cart_sessions")
}

model guest_cart_items {
  id               BigInt    @id @default(autoincrement())
  
  // NOTE: Keep the session_id TEXT field, as it was in your raw SQL for login lookup.
  session_id       String    @db.Text 
  
  // The scalar field is OPTIONAL (BigInt?)
  cart_session_id  BigInt?   
  
  fragrance_id     BigInt
  decant_size_id   BigInt
  quantity         Int       @default(1)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)

  // ðŸ’¥ CORRECTED Relation Definition (add '?' here) ðŸ’¥
  cart_session     cart_sessions? @relation(fields: [cart_session_id], references: [id])
  
  fragrance        fragrances   @relation(fields: [fragrance_id], references: [id])
  decant_size      decant_sizes @relation(fields: [decant_size_id], references: [id])

  // Retain original constraints
  @@unique([session_id, fragrance_id, decant_size_id])
  @@index([session_id], name: "idx_guest_cart_items_session_id")
  @@index([cart_session_id]) 
  
  @@map("guest_cart_items")
}