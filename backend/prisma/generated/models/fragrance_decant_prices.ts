
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `fragrance_decant_prices` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model fragrance_decant_prices
 * 
 */
export type fragrance_decant_pricesModel = runtime.Types.Result.DefaultSelection<Prisma.$fragrance_decant_pricesPayload>

export type AggregateFragrance_decant_prices = {
  _count: Fragrance_decant_pricesCountAggregateOutputType | null
  _avg: Fragrance_decant_pricesAvgAggregateOutputType | null
  _sum: Fragrance_decant_pricesSumAggregateOutputType | null
  _min: Fragrance_decant_pricesMinAggregateOutputType | null
  _max: Fragrance_decant_pricesMaxAggregateOutputType | null
}

export type Fragrance_decant_pricesAvgAggregateOutputType = {
  id: number | null
  fragrance_id: number | null
  decant_size_id: number | null
  price: number | null
}

export type Fragrance_decant_pricesSumAggregateOutputType = {
  id: bigint | null
  fragrance_id: bigint | null
  decant_size_id: bigint | null
  price: number | null
}

export type Fragrance_decant_pricesMinAggregateOutputType = {
  id: bigint | null
  fragrance_id: bigint | null
  decant_size_id: bigint | null
  price: number | null
}

export type Fragrance_decant_pricesMaxAggregateOutputType = {
  id: bigint | null
  fragrance_id: bigint | null
  decant_size_id: bigint | null
  price: number | null
}

export type Fragrance_decant_pricesCountAggregateOutputType = {
  id: number
  fragrance_id: number
  decant_size_id: number
  price: number
  _all: number
}


export type Fragrance_decant_pricesAvgAggregateInputType = {
  id?: true
  fragrance_id?: true
  decant_size_id?: true
  price?: true
}

export type Fragrance_decant_pricesSumAggregateInputType = {
  id?: true
  fragrance_id?: true
  decant_size_id?: true
  price?: true
}

export type Fragrance_decant_pricesMinAggregateInputType = {
  id?: true
  fragrance_id?: true
  decant_size_id?: true
  price?: true
}

export type Fragrance_decant_pricesMaxAggregateInputType = {
  id?: true
  fragrance_id?: true
  decant_size_id?: true
  price?: true
}

export type Fragrance_decant_pricesCountAggregateInputType = {
  id?: true
  fragrance_id?: true
  decant_size_id?: true
  price?: true
  _all?: true
}

export type Fragrance_decant_pricesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which fragrance_decant_prices to aggregate.
   */
  where?: Prisma.fragrance_decant_pricesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrance_decant_prices to fetch.
   */
  orderBy?: Prisma.fragrance_decant_pricesOrderByWithRelationInput | Prisma.fragrance_decant_pricesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.fragrance_decant_pricesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrance_decant_prices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrance_decant_prices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned fragrance_decant_prices
  **/
  _count?: true | Fragrance_decant_pricesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Fragrance_decant_pricesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Fragrance_decant_pricesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Fragrance_decant_pricesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Fragrance_decant_pricesMaxAggregateInputType
}

export type GetFragrance_decant_pricesAggregateType<T extends Fragrance_decant_pricesAggregateArgs> = {
      [P in keyof T & keyof AggregateFragrance_decant_prices]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFragrance_decant_prices[P]>
    : Prisma.GetScalarType<T[P], AggregateFragrance_decant_prices[P]>
}




export type fragrance_decant_pricesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.fragrance_decant_pricesWhereInput
  orderBy?: Prisma.fragrance_decant_pricesOrderByWithAggregationInput | Prisma.fragrance_decant_pricesOrderByWithAggregationInput[]
  by: Prisma.Fragrance_decant_pricesScalarFieldEnum[] | Prisma.Fragrance_decant_pricesScalarFieldEnum
  having?: Prisma.fragrance_decant_pricesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Fragrance_decant_pricesCountAggregateInputType | true
  _avg?: Fragrance_decant_pricesAvgAggregateInputType
  _sum?: Fragrance_decant_pricesSumAggregateInputType
  _min?: Fragrance_decant_pricesMinAggregateInputType
  _max?: Fragrance_decant_pricesMaxAggregateInputType
}

export type Fragrance_decant_pricesGroupByOutputType = {
  id: bigint
  fragrance_id: bigint
  decant_size_id: bigint
  price: number
  _count: Fragrance_decant_pricesCountAggregateOutputType | null
  _avg: Fragrance_decant_pricesAvgAggregateOutputType | null
  _sum: Fragrance_decant_pricesSumAggregateOutputType | null
  _min: Fragrance_decant_pricesMinAggregateOutputType | null
  _max: Fragrance_decant_pricesMaxAggregateOutputType | null
}

type GetFragrance_decant_pricesGroupByPayload<T extends fragrance_decant_pricesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Fragrance_decant_pricesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Fragrance_decant_pricesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Fragrance_decant_pricesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Fragrance_decant_pricesGroupByOutputType[P]>
      }
    >
  >



export type fragrance_decant_pricesWhereInput = {
  AND?: Prisma.fragrance_decant_pricesWhereInput | Prisma.fragrance_decant_pricesWhereInput[]
  OR?: Prisma.fragrance_decant_pricesWhereInput[]
  NOT?: Prisma.fragrance_decant_pricesWhereInput | Prisma.fragrance_decant_pricesWhereInput[]
  id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  fragrance_id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  decant_size_id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  price?: Prisma.FloatFilter<"fragrance_decant_prices"> | number
  fragrance?: Prisma.XOR<Prisma.FragrancesScalarRelationFilter, Prisma.fragrancesWhereInput>
  decant_size?: Prisma.XOR<Prisma.Decant_sizesScalarRelationFilter, Prisma.decant_sizesWhereInput>
}

export type fragrance_decant_pricesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  fragrance_id?: Prisma.SortOrder
  decant_size_id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  fragrance?: Prisma.fragrancesOrderByWithRelationInput
  decant_size?: Prisma.decant_sizesOrderByWithRelationInput
}

export type fragrance_decant_pricesWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  fragrance_id_decant_size_id?: Prisma.fragrance_decant_pricesFragrance_idDecant_size_idCompoundUniqueInput
  AND?: Prisma.fragrance_decant_pricesWhereInput | Prisma.fragrance_decant_pricesWhereInput[]
  OR?: Prisma.fragrance_decant_pricesWhereInput[]
  NOT?: Prisma.fragrance_decant_pricesWhereInput | Prisma.fragrance_decant_pricesWhereInput[]
  fragrance_id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  decant_size_id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  price?: Prisma.FloatFilter<"fragrance_decant_prices"> | number
  fragrance?: Prisma.XOR<Prisma.FragrancesScalarRelationFilter, Prisma.fragrancesWhereInput>
  decant_size?: Prisma.XOR<Prisma.Decant_sizesScalarRelationFilter, Prisma.decant_sizesWhereInput>
}, "id" | "fragrance_id_decant_size_id">

export type fragrance_decant_pricesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  fragrance_id?: Prisma.SortOrder
  decant_size_id?: Prisma.SortOrder
  price?: Prisma.SortOrder
  _count?: Prisma.fragrance_decant_pricesCountOrderByAggregateInput
  _avg?: Prisma.fragrance_decant_pricesAvgOrderByAggregateInput
  _max?: Prisma.fragrance_decant_pricesMaxOrderByAggregateInput
  _min?: Prisma.fragrance_decant_pricesMinOrderByAggregateInput
  _sum?: Prisma.fragrance_decant_pricesSumOrderByAggregateInput
}

export type fragrance_decant_pricesScalarWhereWithAggregatesInput = {
  AND?: Prisma.fragrance_decant_pricesScalarWhereWithAggregatesInput | Prisma.fragrance_decant_pricesScalarWhereWithAggregatesInput[]
  OR?: Prisma.fragrance_decant_pricesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.fragrance_decant_pricesScalarWhereWithAggregatesInput | Prisma.fragrance_decant_pricesScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"fragrance_decant_prices"> | bigint | number
  fragrance_id?: Prisma.BigIntWithAggregatesFilter<"fragrance_decant_prices"> | bigint | number
  decant_size_id?: Prisma.BigIntWithAggregatesFilter<"fragrance_decant_prices"> | bigint | number
  price?: Prisma.FloatWithAggregatesFilter<"fragrance_decant_prices"> | number
}

export type fragrance_decant_pricesCreateInput = {
  id?: bigint | number
  price: number
  fragrance: Prisma.fragrancesCreateNestedOneWithoutFragrance_decant_pricesInput
  decant_size: Prisma.decant_sizesCreateNestedOneWithoutFragrance_decant_pricesInput
}

export type fragrance_decant_pricesUncheckedCreateInput = {
  id?: bigint | number
  fragrance_id: bigint | number
  decant_size_id: bigint | number
  price: number
}

export type fragrance_decant_pricesUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  fragrance?: Prisma.fragrancesUpdateOneRequiredWithoutFragrance_decant_pricesNestedInput
  decant_size?: Prisma.decant_sizesUpdateOneRequiredWithoutFragrance_decant_pricesNestedInput
}

export type fragrance_decant_pricesUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  fragrance_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  decant_size_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type fragrance_decant_pricesCreateManyInput = {
  id?: bigint | number
  fragrance_id: bigint | number
  decant_size_id: bigint | number
  price: number
}

export type fragrance_decant_pricesUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type fragrance_decant_pricesUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  fragrance_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  decant_size_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type Fragrance_decant_pricesListRelationFilter = {
  every?: Prisma.fragrance_decant_pricesWhereInput
  some?: Prisma.fragrance_decant_pricesWhereInput
  none?: Prisma.fragrance_decant_pricesWhereInput
}

export type fragrance_decant_pricesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type fragrance_decant_pricesFragrance_idDecant_size_idCompoundUniqueInput = {
  fragrance_id: bigint | number
  decant_size_id: bigint | number
}

export type fragrance_decant_pricesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fragrance_id?: Prisma.SortOrder
  decant_size_id?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type fragrance_decant_pricesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fragrance_id?: Prisma.SortOrder
  decant_size_id?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type fragrance_decant_pricesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fragrance_id?: Prisma.SortOrder
  decant_size_id?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type fragrance_decant_pricesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fragrance_id?: Prisma.SortOrder
  decant_size_id?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type fragrance_decant_pricesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  fragrance_id?: Prisma.SortOrder
  decant_size_id?: Prisma.SortOrder
  price?: Prisma.SortOrder
}

export type fragrance_decant_pricesCreateNestedManyWithoutFragranceInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput> | Prisma.fragrance_decant_pricesCreateWithoutFragranceInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyFragranceInputEnvelope
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
}

export type fragrance_decant_pricesUncheckedCreateNestedManyWithoutFragranceInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput> | Prisma.fragrance_decant_pricesCreateWithoutFragranceInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyFragranceInputEnvelope
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
}

export type fragrance_decant_pricesUpdateManyWithoutFragranceNestedInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput> | Prisma.fragrance_decant_pricesCreateWithoutFragranceInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput[]
  upsert?: Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutFragranceInput | Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutFragranceInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyFragranceInputEnvelope
  set?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  disconnect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  delete?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  update?: Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutFragranceInput | Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutFragranceInput[]
  updateMany?: Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutFragranceInput | Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutFragranceInput[]
  deleteMany?: Prisma.fragrance_decant_pricesScalarWhereInput | Prisma.fragrance_decant_pricesScalarWhereInput[]
}

export type fragrance_decant_pricesUncheckedUpdateManyWithoutFragranceNestedInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput> | Prisma.fragrance_decant_pricesCreateWithoutFragranceInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutFragranceInput[]
  upsert?: Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutFragranceInput | Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutFragranceInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyFragranceInputEnvelope
  set?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  disconnect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  delete?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  update?: Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutFragranceInput | Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutFragranceInput[]
  updateMany?: Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutFragranceInput | Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutFragranceInput[]
  deleteMany?: Prisma.fragrance_decant_pricesScalarWhereInput | Prisma.fragrance_decant_pricesScalarWhereInput[]
}

export type fragrance_decant_pricesCreateNestedManyWithoutDecant_sizeInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput> | Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyDecant_sizeInputEnvelope
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
}

export type fragrance_decant_pricesUncheckedCreateNestedManyWithoutDecant_sizeInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput> | Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyDecant_sizeInputEnvelope
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
}

export type fragrance_decant_pricesUpdateManyWithoutDecant_sizeNestedInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput> | Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput[]
  upsert?: Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutDecant_sizeInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyDecant_sizeInputEnvelope
  set?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  disconnect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  delete?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  update?: Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutDecant_sizeInput[]
  updateMany?: Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutDecant_sizeInput[]
  deleteMany?: Prisma.fragrance_decant_pricesScalarWhereInput | Prisma.fragrance_decant_pricesScalarWhereInput[]
}

export type fragrance_decant_pricesUncheckedUpdateManyWithoutDecant_sizeNestedInput = {
  create?: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput> | Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput[] | Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput[]
  connectOrCreate?: Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput[]
  upsert?: Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesUpsertWithWhereUniqueWithoutDecant_sizeInput[]
  createMany?: Prisma.fragrance_decant_pricesCreateManyDecant_sizeInputEnvelope
  set?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  disconnect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  delete?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  connect?: Prisma.fragrance_decant_pricesWhereUniqueInput | Prisma.fragrance_decant_pricesWhereUniqueInput[]
  update?: Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesUpdateWithWhereUniqueWithoutDecant_sizeInput[]
  updateMany?: Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutDecant_sizeInput | Prisma.fragrance_decant_pricesUpdateManyWithWhereWithoutDecant_sizeInput[]
  deleteMany?: Prisma.fragrance_decant_pricesScalarWhereInput | Prisma.fragrance_decant_pricesScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type fragrance_decant_pricesCreateWithoutFragranceInput = {
  id?: bigint | number
  price: number
  decant_size: Prisma.decant_sizesCreateNestedOneWithoutFragrance_decant_pricesInput
}

export type fragrance_decant_pricesUncheckedCreateWithoutFragranceInput = {
  id?: bigint | number
  decant_size_id: bigint | number
  price: number
}

export type fragrance_decant_pricesCreateOrConnectWithoutFragranceInput = {
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
  create: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput>
}

export type fragrance_decant_pricesCreateManyFragranceInputEnvelope = {
  data: Prisma.fragrance_decant_pricesCreateManyFragranceInput | Prisma.fragrance_decant_pricesCreateManyFragranceInput[]
  skipDuplicates?: boolean
}

export type fragrance_decant_pricesUpsertWithWhereUniqueWithoutFragranceInput = {
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
  update: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedUpdateWithoutFragranceInput>
  create: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutFragranceInput>
}

export type fragrance_decant_pricesUpdateWithWhereUniqueWithoutFragranceInput = {
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
  data: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateWithoutFragranceInput, Prisma.fragrance_decant_pricesUncheckedUpdateWithoutFragranceInput>
}

export type fragrance_decant_pricesUpdateManyWithWhereWithoutFragranceInput = {
  where: Prisma.fragrance_decant_pricesScalarWhereInput
  data: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateManyMutationInput, Prisma.fragrance_decant_pricesUncheckedUpdateManyWithoutFragranceInput>
}

export type fragrance_decant_pricesScalarWhereInput = {
  AND?: Prisma.fragrance_decant_pricesScalarWhereInput | Prisma.fragrance_decant_pricesScalarWhereInput[]
  OR?: Prisma.fragrance_decant_pricesScalarWhereInput[]
  NOT?: Prisma.fragrance_decant_pricesScalarWhereInput | Prisma.fragrance_decant_pricesScalarWhereInput[]
  id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  fragrance_id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  decant_size_id?: Prisma.BigIntFilter<"fragrance_decant_prices"> | bigint | number
  price?: Prisma.FloatFilter<"fragrance_decant_prices"> | number
}

export type fragrance_decant_pricesCreateWithoutDecant_sizeInput = {
  id?: bigint | number
  price: number
  fragrance: Prisma.fragrancesCreateNestedOneWithoutFragrance_decant_pricesInput
}

export type fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput = {
  id?: bigint | number
  fragrance_id: bigint | number
  price: number
}

export type fragrance_decant_pricesCreateOrConnectWithoutDecant_sizeInput = {
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
  create: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput>
}

export type fragrance_decant_pricesCreateManyDecant_sizeInputEnvelope = {
  data: Prisma.fragrance_decant_pricesCreateManyDecant_sizeInput | Prisma.fragrance_decant_pricesCreateManyDecant_sizeInput[]
  skipDuplicates?: boolean
}

export type fragrance_decant_pricesUpsertWithWhereUniqueWithoutDecant_sizeInput = {
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
  update: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedUpdateWithoutDecant_sizeInput>
  create: Prisma.XOR<Prisma.fragrance_decant_pricesCreateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedCreateWithoutDecant_sizeInput>
}

export type fragrance_decant_pricesUpdateWithWhereUniqueWithoutDecant_sizeInput = {
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
  data: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateWithoutDecant_sizeInput, Prisma.fragrance_decant_pricesUncheckedUpdateWithoutDecant_sizeInput>
}

export type fragrance_decant_pricesUpdateManyWithWhereWithoutDecant_sizeInput = {
  where: Prisma.fragrance_decant_pricesScalarWhereInput
  data: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateManyMutationInput, Prisma.fragrance_decant_pricesUncheckedUpdateManyWithoutDecant_sizeInput>
}

export type fragrance_decant_pricesCreateManyFragranceInput = {
  id?: bigint | number
  decant_size_id: bigint | number
  price: number
}

export type fragrance_decant_pricesUpdateWithoutFragranceInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  decant_size?: Prisma.decant_sizesUpdateOneRequiredWithoutFragrance_decant_pricesNestedInput
}

export type fragrance_decant_pricesUncheckedUpdateWithoutFragranceInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  decant_size_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type fragrance_decant_pricesUncheckedUpdateManyWithoutFragranceInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  decant_size_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type fragrance_decant_pricesCreateManyDecant_sizeInput = {
  id?: bigint | number
  fragrance_id: bigint | number
  price: number
}

export type fragrance_decant_pricesUpdateWithoutDecant_sizeInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  fragrance?: Prisma.fragrancesUpdateOneRequiredWithoutFragrance_decant_pricesNestedInput
}

export type fragrance_decant_pricesUncheckedUpdateWithoutDecant_sizeInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  fragrance_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type fragrance_decant_pricesUncheckedUpdateManyWithoutDecant_sizeInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  fragrance_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  price?: Prisma.FloatFieldUpdateOperationsInput | number
}



export type fragrance_decant_pricesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fragrance_id?: boolean
  decant_size_id?: boolean
  price?: boolean
  fragrance?: boolean | Prisma.fragrancesDefaultArgs<ExtArgs>
  decant_size?: boolean | Prisma.decant_sizesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragrance_decant_prices"]>

export type fragrance_decant_pricesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fragrance_id?: boolean
  decant_size_id?: boolean
  price?: boolean
  fragrance?: boolean | Prisma.fragrancesDefaultArgs<ExtArgs>
  decant_size?: boolean | Prisma.decant_sizesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragrance_decant_prices"]>

export type fragrance_decant_pricesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  fragrance_id?: boolean
  decant_size_id?: boolean
  price?: boolean
  fragrance?: boolean | Prisma.fragrancesDefaultArgs<ExtArgs>
  decant_size?: boolean | Prisma.decant_sizesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragrance_decant_prices"]>

export type fragrance_decant_pricesSelectScalar = {
  id?: boolean
  fragrance_id?: boolean
  decant_size_id?: boolean
  price?: boolean
}

export type fragrance_decant_pricesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fragrance_id" | "decant_size_id" | "price", ExtArgs["result"]["fragrance_decant_prices"]>
export type fragrance_decant_pricesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fragrance?: boolean | Prisma.fragrancesDefaultArgs<ExtArgs>
  decant_size?: boolean | Prisma.decant_sizesDefaultArgs<ExtArgs>
}
export type fragrance_decant_pricesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fragrance?: boolean | Prisma.fragrancesDefaultArgs<ExtArgs>
  decant_size?: boolean | Prisma.decant_sizesDefaultArgs<ExtArgs>
}
export type fragrance_decant_pricesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fragrance?: boolean | Prisma.fragrancesDefaultArgs<ExtArgs>
  decant_size?: boolean | Prisma.decant_sizesDefaultArgs<ExtArgs>
}

export type $fragrance_decant_pricesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "fragrance_decant_prices"
  objects: {
    fragrance: Prisma.$fragrancesPayload<ExtArgs>
    decant_size: Prisma.$decant_sizesPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    fragrance_id: bigint
    decant_size_id: bigint
    price: number
  }, ExtArgs["result"]["fragrance_decant_prices"]>
  composites: {}
}

export type fragrance_decant_pricesGetPayload<S extends boolean | null | undefined | fragrance_decant_pricesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload, S>

export type fragrance_decant_pricesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<fragrance_decant_pricesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Fragrance_decant_pricesCountAggregateInputType | true
  }

export interface fragrance_decant_pricesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fragrance_decant_prices'], meta: { name: 'fragrance_decant_prices' } }
  /**
   * Find zero or one Fragrance_decant_prices that matches the filter.
   * @param {fragrance_decant_pricesFindUniqueArgs} args - Arguments to find a Fragrance_decant_prices
   * @example
   * // Get one Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends fragrance_decant_pricesFindUniqueArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Fragrance_decant_prices that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {fragrance_decant_pricesFindUniqueOrThrowArgs} args - Arguments to find a Fragrance_decant_prices
   * @example
   * // Get one Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends fragrance_decant_pricesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fragrance_decant_prices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrance_decant_pricesFindFirstArgs} args - Arguments to find a Fragrance_decant_prices
   * @example
   * // Get one Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends fragrance_decant_pricesFindFirstArgs>(args?: Prisma.SelectSubset<T, fragrance_decant_pricesFindFirstArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fragrance_decant_prices that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrance_decant_pricesFindFirstOrThrowArgs} args - Arguments to find a Fragrance_decant_prices
   * @example
   * // Get one Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends fragrance_decant_pricesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, fragrance_decant_pricesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Fragrance_decant_prices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrance_decant_pricesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.findMany()
   * 
   * // Get first 10 Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fragrance_decant_pricesWithIdOnly = await prisma.fragrance_decant_prices.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends fragrance_decant_pricesFindManyArgs>(args?: Prisma.SelectSubset<T, fragrance_decant_pricesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Fragrance_decant_prices.
   * @param {fragrance_decant_pricesCreateArgs} args - Arguments to create a Fragrance_decant_prices.
   * @example
   * // Create one Fragrance_decant_prices
   * const Fragrance_decant_prices = await prisma.fragrance_decant_prices.create({
   *   data: {
   *     // ... data to create a Fragrance_decant_prices
   *   }
   * })
   * 
   */
  create<T extends fragrance_decant_pricesCreateArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesCreateArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Fragrance_decant_prices.
   * @param {fragrance_decant_pricesCreateManyArgs} args - Arguments to create many Fragrance_decant_prices.
   * @example
   * // Create many Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends fragrance_decant_pricesCreateManyArgs>(args?: Prisma.SelectSubset<T, fragrance_decant_pricesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Fragrance_decant_prices and returns the data saved in the database.
   * @param {fragrance_decant_pricesCreateManyAndReturnArgs} args - Arguments to create many Fragrance_decant_prices.
   * @example
   * // Create many Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Fragrance_decant_prices and only return the `id`
   * const fragrance_decant_pricesWithIdOnly = await prisma.fragrance_decant_prices.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends fragrance_decant_pricesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, fragrance_decant_pricesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Fragrance_decant_prices.
   * @param {fragrance_decant_pricesDeleteArgs} args - Arguments to delete one Fragrance_decant_prices.
   * @example
   * // Delete one Fragrance_decant_prices
   * const Fragrance_decant_prices = await prisma.fragrance_decant_prices.delete({
   *   where: {
   *     // ... filter to delete one Fragrance_decant_prices
   *   }
   * })
   * 
   */
  delete<T extends fragrance_decant_pricesDeleteArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesDeleteArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Fragrance_decant_prices.
   * @param {fragrance_decant_pricesUpdateArgs} args - Arguments to update one Fragrance_decant_prices.
   * @example
   * // Update one Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends fragrance_decant_pricesUpdateArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesUpdateArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Fragrance_decant_prices.
   * @param {fragrance_decant_pricesDeleteManyArgs} args - Arguments to filter Fragrance_decant_prices to delete.
   * @example
   * // Delete a few Fragrance_decant_prices
   * const { count } = await prisma.fragrance_decant_prices.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends fragrance_decant_pricesDeleteManyArgs>(args?: Prisma.SelectSubset<T, fragrance_decant_pricesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fragrance_decant_prices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrance_decant_pricesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends fragrance_decant_pricesUpdateManyArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fragrance_decant_prices and returns the data updated in the database.
   * @param {fragrance_decant_pricesUpdateManyAndReturnArgs} args - Arguments to update many Fragrance_decant_prices.
   * @example
   * // Update many Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Fragrance_decant_prices and only return the `id`
   * const fragrance_decant_pricesWithIdOnly = await prisma.fragrance_decant_prices.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends fragrance_decant_pricesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Fragrance_decant_prices.
   * @param {fragrance_decant_pricesUpsertArgs} args - Arguments to update or create a Fragrance_decant_prices.
   * @example
   * // Update or create a Fragrance_decant_prices
   * const fragrance_decant_prices = await prisma.fragrance_decant_prices.upsert({
   *   create: {
   *     // ... data to create a Fragrance_decant_prices
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Fragrance_decant_prices we want to update
   *   }
   * })
   */
  upsert<T extends fragrance_decant_pricesUpsertArgs>(args: Prisma.SelectSubset<T, fragrance_decant_pricesUpsertArgs<ExtArgs>>): Prisma.Prisma__fragrance_decant_pricesClient<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Fragrance_decant_prices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrance_decant_pricesCountArgs} args - Arguments to filter Fragrance_decant_prices to count.
   * @example
   * // Count the number of Fragrance_decant_prices
   * const count = await prisma.fragrance_decant_prices.count({
   *   where: {
   *     // ... the filter for the Fragrance_decant_prices we want to count
   *   }
   * })
  **/
  count<T extends fragrance_decant_pricesCountArgs>(
    args?: Prisma.Subset<T, fragrance_decant_pricesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Fragrance_decant_pricesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Fragrance_decant_prices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Fragrance_decant_pricesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Fragrance_decant_pricesAggregateArgs>(args: Prisma.Subset<T, Fragrance_decant_pricesAggregateArgs>): Prisma.PrismaPromise<GetFragrance_decant_pricesAggregateType<T>>

  /**
   * Group by Fragrance_decant_prices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrance_decant_pricesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends fragrance_decant_pricesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: fragrance_decant_pricesGroupByArgs['orderBy'] }
      : { orderBy?: fragrance_decant_pricesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, fragrance_decant_pricesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFragrance_decant_pricesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the fragrance_decant_prices model
 */
readonly fields: fragrance_decant_pricesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for fragrance_decant_prices.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__fragrance_decant_pricesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  fragrance<T extends Prisma.fragrancesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.fragrancesDefaultArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  decant_size<T extends Prisma.decant_sizesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.decant_sizesDefaultArgs<ExtArgs>>): Prisma.Prisma__decant_sizesClient<runtime.Types.Result.GetResult<Prisma.$decant_sizesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the fragrance_decant_prices model
 */
export interface fragrance_decant_pricesFieldRefs {
  readonly id: Prisma.FieldRef<"fragrance_decant_prices", 'BigInt'>
  readonly fragrance_id: Prisma.FieldRef<"fragrance_decant_prices", 'BigInt'>
  readonly decant_size_id: Prisma.FieldRef<"fragrance_decant_prices", 'BigInt'>
  readonly price: Prisma.FieldRef<"fragrance_decant_prices", 'Float'>
}
    

// Custom InputTypes
/**
 * fragrance_decant_prices findUnique
 */
export type fragrance_decant_pricesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * Filter, which fragrance_decant_prices to fetch.
   */
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
}

/**
 * fragrance_decant_prices findUniqueOrThrow
 */
export type fragrance_decant_pricesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * Filter, which fragrance_decant_prices to fetch.
   */
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
}

/**
 * fragrance_decant_prices findFirst
 */
export type fragrance_decant_pricesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * Filter, which fragrance_decant_prices to fetch.
   */
  where?: Prisma.fragrance_decant_pricesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrance_decant_prices to fetch.
   */
  orderBy?: Prisma.fragrance_decant_pricesOrderByWithRelationInput | Prisma.fragrance_decant_pricesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for fragrance_decant_prices.
   */
  cursor?: Prisma.fragrance_decant_pricesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrance_decant_prices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrance_decant_prices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of fragrance_decant_prices.
   */
  distinct?: Prisma.Fragrance_decant_pricesScalarFieldEnum | Prisma.Fragrance_decant_pricesScalarFieldEnum[]
}

/**
 * fragrance_decant_prices findFirstOrThrow
 */
export type fragrance_decant_pricesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * Filter, which fragrance_decant_prices to fetch.
   */
  where?: Prisma.fragrance_decant_pricesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrance_decant_prices to fetch.
   */
  orderBy?: Prisma.fragrance_decant_pricesOrderByWithRelationInput | Prisma.fragrance_decant_pricesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for fragrance_decant_prices.
   */
  cursor?: Prisma.fragrance_decant_pricesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrance_decant_prices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrance_decant_prices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of fragrance_decant_prices.
   */
  distinct?: Prisma.Fragrance_decant_pricesScalarFieldEnum | Prisma.Fragrance_decant_pricesScalarFieldEnum[]
}

/**
 * fragrance_decant_prices findMany
 */
export type fragrance_decant_pricesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * Filter, which fragrance_decant_prices to fetch.
   */
  where?: Prisma.fragrance_decant_pricesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrance_decant_prices to fetch.
   */
  orderBy?: Prisma.fragrance_decant_pricesOrderByWithRelationInput | Prisma.fragrance_decant_pricesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing fragrance_decant_prices.
   */
  cursor?: Prisma.fragrance_decant_pricesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrance_decant_prices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrance_decant_prices.
   */
  skip?: number
  distinct?: Prisma.Fragrance_decant_pricesScalarFieldEnum | Prisma.Fragrance_decant_pricesScalarFieldEnum[]
}

/**
 * fragrance_decant_prices create
 */
export type fragrance_decant_pricesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * The data needed to create a fragrance_decant_prices.
   */
  data: Prisma.XOR<Prisma.fragrance_decant_pricesCreateInput, Prisma.fragrance_decant_pricesUncheckedCreateInput>
}

/**
 * fragrance_decant_prices createMany
 */
export type fragrance_decant_pricesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many fragrance_decant_prices.
   */
  data: Prisma.fragrance_decant_pricesCreateManyInput | Prisma.fragrance_decant_pricesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * fragrance_decant_prices createManyAndReturn
 */
export type fragrance_decant_pricesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * The data used to create many fragrance_decant_prices.
   */
  data: Prisma.fragrance_decant_pricesCreateManyInput | Prisma.fragrance_decant_pricesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * fragrance_decant_prices update
 */
export type fragrance_decant_pricesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * The data needed to update a fragrance_decant_prices.
   */
  data: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateInput, Prisma.fragrance_decant_pricesUncheckedUpdateInput>
  /**
   * Choose, which fragrance_decant_prices to update.
   */
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
}

/**
 * fragrance_decant_prices updateMany
 */
export type fragrance_decant_pricesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update fragrance_decant_prices.
   */
  data: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateManyMutationInput, Prisma.fragrance_decant_pricesUncheckedUpdateManyInput>
  /**
   * Filter which fragrance_decant_prices to update
   */
  where?: Prisma.fragrance_decant_pricesWhereInput
  /**
   * Limit how many fragrance_decant_prices to update.
   */
  limit?: number
}

/**
 * fragrance_decant_prices updateManyAndReturn
 */
export type fragrance_decant_pricesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * The data used to update fragrance_decant_prices.
   */
  data: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateManyMutationInput, Prisma.fragrance_decant_pricesUncheckedUpdateManyInput>
  /**
   * Filter which fragrance_decant_prices to update
   */
  where?: Prisma.fragrance_decant_pricesWhereInput
  /**
   * Limit how many fragrance_decant_prices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * fragrance_decant_prices upsert
 */
export type fragrance_decant_pricesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * The filter to search for the fragrance_decant_prices to update in case it exists.
   */
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
  /**
   * In case the fragrance_decant_prices found by the `where` argument doesn't exist, create a new fragrance_decant_prices with this data.
   */
  create: Prisma.XOR<Prisma.fragrance_decant_pricesCreateInput, Prisma.fragrance_decant_pricesUncheckedCreateInput>
  /**
   * In case the fragrance_decant_prices was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.fragrance_decant_pricesUpdateInput, Prisma.fragrance_decant_pricesUncheckedUpdateInput>
}

/**
 * fragrance_decant_prices delete
 */
export type fragrance_decant_pricesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  /**
   * Filter which fragrance_decant_prices to delete.
   */
  where: Prisma.fragrance_decant_pricesWhereUniqueInput
}

/**
 * fragrance_decant_prices deleteMany
 */
export type fragrance_decant_pricesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which fragrance_decant_prices to delete
   */
  where?: Prisma.fragrance_decant_pricesWhereInput
  /**
   * Limit how many fragrance_decant_prices to delete.
   */
  limit?: number
}

/**
 * fragrance_decant_prices without action
 */
export type fragrance_decant_pricesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
}
