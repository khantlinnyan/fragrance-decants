
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `cart_sessions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model cart_sessions
 * 
 */
export type cart_sessionsModel = runtime.Types.Result.DefaultSelection<Prisma.$cart_sessionsPayload>

export type AggregateCart_sessions = {
  _count: Cart_sessionsCountAggregateOutputType | null
  _avg: Cart_sessionsAvgAggregateOutputType | null
  _sum: Cart_sessionsSumAggregateOutputType | null
  _min: Cart_sessionsMinAggregateOutputType | null
  _max: Cart_sessionsMaxAggregateOutputType | null
}

export type Cart_sessionsAvgAggregateOutputType = {
  id: number | null
}

export type Cart_sessionsSumAggregateOutputType = {
  id: bigint | null
}

export type Cart_sessionsMinAggregateOutputType = {
  id: bigint | null
  session_id: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type Cart_sessionsMaxAggregateOutputType = {
  id: bigint | null
  session_id: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type Cart_sessionsCountAggregateOutputType = {
  id: number
  session_id: number
  created_at: number
  updated_at: number
  _all: number
}


export type Cart_sessionsAvgAggregateInputType = {
  id?: true
}

export type Cart_sessionsSumAggregateInputType = {
  id?: true
}

export type Cart_sessionsMinAggregateInputType = {
  id?: true
  session_id?: true
  created_at?: true
  updated_at?: true
}

export type Cart_sessionsMaxAggregateInputType = {
  id?: true
  session_id?: true
  created_at?: true
  updated_at?: true
}

export type Cart_sessionsCountAggregateInputType = {
  id?: true
  session_id?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type Cart_sessionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which cart_sessions to aggregate.
   */
  where?: Prisma.cart_sessionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cart_sessions to fetch.
   */
  orderBy?: Prisma.cart_sessionsOrderByWithRelationInput | Prisma.cart_sessionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.cart_sessionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cart_sessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cart_sessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned cart_sessions
  **/
  _count?: true | Cart_sessionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: Cart_sessionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: Cart_sessionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Cart_sessionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Cart_sessionsMaxAggregateInputType
}

export type GetCart_sessionsAggregateType<T extends Cart_sessionsAggregateArgs> = {
      [P in keyof T & keyof AggregateCart_sessions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCart_sessions[P]>
    : Prisma.GetScalarType<T[P], AggregateCart_sessions[P]>
}




export type cart_sessionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.cart_sessionsWhereInput
  orderBy?: Prisma.cart_sessionsOrderByWithAggregationInput | Prisma.cart_sessionsOrderByWithAggregationInput[]
  by: Prisma.Cart_sessionsScalarFieldEnum[] | Prisma.Cart_sessionsScalarFieldEnum
  having?: Prisma.cart_sessionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Cart_sessionsCountAggregateInputType | true
  _avg?: Cart_sessionsAvgAggregateInputType
  _sum?: Cart_sessionsSumAggregateInputType
  _min?: Cart_sessionsMinAggregateInputType
  _max?: Cart_sessionsMaxAggregateInputType
}

export type Cart_sessionsGroupByOutputType = {
  id: bigint
  session_id: string
  created_at: Date
  updated_at: Date
  _count: Cart_sessionsCountAggregateOutputType | null
  _avg: Cart_sessionsAvgAggregateOutputType | null
  _sum: Cart_sessionsSumAggregateOutputType | null
  _min: Cart_sessionsMinAggregateOutputType | null
  _max: Cart_sessionsMaxAggregateOutputType | null
}

type GetCart_sessionsGroupByPayload<T extends cart_sessionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Cart_sessionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Cart_sessionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Cart_sessionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Cart_sessionsGroupByOutputType[P]>
      }
    >
  >



export type cart_sessionsWhereInput = {
  AND?: Prisma.cart_sessionsWhereInput | Prisma.cart_sessionsWhereInput[]
  OR?: Prisma.cart_sessionsWhereInput[]
  NOT?: Prisma.cart_sessionsWhereInput | Prisma.cart_sessionsWhereInput[]
  id?: Prisma.BigIntFilter<"cart_sessions"> | bigint | number
  session_id?: Prisma.StringFilter<"cart_sessions"> | string
  created_at?: Prisma.DateTimeFilter<"cart_sessions"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"cart_sessions"> | Date | string
  guest_cart_items?: Prisma.Guest_cart_itemsListRelationFilter
}

export type cart_sessionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  session_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  guest_cart_items?: Prisma.guest_cart_itemsOrderByRelationAggregateInput
}

export type cart_sessionsWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  session_id?: string
  AND?: Prisma.cart_sessionsWhereInput | Prisma.cart_sessionsWhereInput[]
  OR?: Prisma.cart_sessionsWhereInput[]
  NOT?: Prisma.cart_sessionsWhereInput | Prisma.cart_sessionsWhereInput[]
  created_at?: Prisma.DateTimeFilter<"cart_sessions"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"cart_sessions"> | Date | string
  guest_cart_items?: Prisma.Guest_cart_itemsListRelationFilter
}, "id" | "session_id">

export type cart_sessionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  session_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.cart_sessionsCountOrderByAggregateInput
  _avg?: Prisma.cart_sessionsAvgOrderByAggregateInput
  _max?: Prisma.cart_sessionsMaxOrderByAggregateInput
  _min?: Prisma.cart_sessionsMinOrderByAggregateInput
  _sum?: Prisma.cart_sessionsSumOrderByAggregateInput
}

export type cart_sessionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.cart_sessionsScalarWhereWithAggregatesInput | Prisma.cart_sessionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.cart_sessionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.cart_sessionsScalarWhereWithAggregatesInput | Prisma.cart_sessionsScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"cart_sessions"> | bigint | number
  session_id?: Prisma.StringWithAggregatesFilter<"cart_sessions"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"cart_sessions"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"cart_sessions"> | Date | string
}

export type cart_sessionsCreateInput = {
  id?: bigint | number
  session_id: string
  created_at?: Date | string
  updated_at?: Date | string
  guest_cart_items?: Prisma.guest_cart_itemsCreateNestedManyWithoutCart_sessionInput
}

export type cart_sessionsUncheckedCreateInput = {
  id?: bigint | number
  session_id: string
  created_at?: Date | string
  updated_at?: Date | string
  guest_cart_items?: Prisma.guest_cart_itemsUncheckedCreateNestedManyWithoutCart_sessionInput
}

export type cart_sessionsUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  session_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  guest_cart_items?: Prisma.guest_cart_itemsUpdateManyWithoutCart_sessionNestedInput
}

export type cart_sessionsUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  session_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  guest_cart_items?: Prisma.guest_cart_itemsUncheckedUpdateManyWithoutCart_sessionNestedInput
}

export type cart_sessionsCreateManyInput = {
  id?: bigint | number
  session_id: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type cart_sessionsUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  session_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type cart_sessionsUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  session_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type cart_sessionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  session_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type cart_sessionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type cart_sessionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  session_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type cart_sessionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  session_id?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type cart_sessionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type Cart_sessionsNullableScalarRelationFilter = {
  is?: Prisma.cart_sessionsWhereInput | null
  isNot?: Prisma.cart_sessionsWhereInput | null
}

export type cart_sessionsCreateNestedOneWithoutGuest_cart_itemsInput = {
  create?: Prisma.XOR<Prisma.cart_sessionsCreateWithoutGuest_cart_itemsInput, Prisma.cart_sessionsUncheckedCreateWithoutGuest_cart_itemsInput>
  connectOrCreate?: Prisma.cart_sessionsCreateOrConnectWithoutGuest_cart_itemsInput
  connect?: Prisma.cart_sessionsWhereUniqueInput
}

export type cart_sessionsUpdateOneWithoutGuest_cart_itemsNestedInput = {
  create?: Prisma.XOR<Prisma.cart_sessionsCreateWithoutGuest_cart_itemsInput, Prisma.cart_sessionsUncheckedCreateWithoutGuest_cart_itemsInput>
  connectOrCreate?: Prisma.cart_sessionsCreateOrConnectWithoutGuest_cart_itemsInput
  upsert?: Prisma.cart_sessionsUpsertWithoutGuest_cart_itemsInput
  disconnect?: Prisma.cart_sessionsWhereInput | boolean
  delete?: Prisma.cart_sessionsWhereInput | boolean
  connect?: Prisma.cart_sessionsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.cart_sessionsUpdateToOneWithWhereWithoutGuest_cart_itemsInput, Prisma.cart_sessionsUpdateWithoutGuest_cart_itemsInput>, Prisma.cart_sessionsUncheckedUpdateWithoutGuest_cart_itemsInput>
}

export type cart_sessionsCreateWithoutGuest_cart_itemsInput = {
  id?: bigint | number
  session_id: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type cart_sessionsUncheckedCreateWithoutGuest_cart_itemsInput = {
  id?: bigint | number
  session_id: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type cart_sessionsCreateOrConnectWithoutGuest_cart_itemsInput = {
  where: Prisma.cart_sessionsWhereUniqueInput
  create: Prisma.XOR<Prisma.cart_sessionsCreateWithoutGuest_cart_itemsInput, Prisma.cart_sessionsUncheckedCreateWithoutGuest_cart_itemsInput>
}

export type cart_sessionsUpsertWithoutGuest_cart_itemsInput = {
  update: Prisma.XOR<Prisma.cart_sessionsUpdateWithoutGuest_cart_itemsInput, Prisma.cart_sessionsUncheckedUpdateWithoutGuest_cart_itemsInput>
  create: Prisma.XOR<Prisma.cart_sessionsCreateWithoutGuest_cart_itemsInput, Prisma.cart_sessionsUncheckedCreateWithoutGuest_cart_itemsInput>
  where?: Prisma.cart_sessionsWhereInput
}

export type cart_sessionsUpdateToOneWithWhereWithoutGuest_cart_itemsInput = {
  where?: Prisma.cart_sessionsWhereInput
  data: Prisma.XOR<Prisma.cart_sessionsUpdateWithoutGuest_cart_itemsInput, Prisma.cart_sessionsUncheckedUpdateWithoutGuest_cart_itemsInput>
}

export type cart_sessionsUpdateWithoutGuest_cart_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  session_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type cart_sessionsUncheckedUpdateWithoutGuest_cart_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  session_id?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type Cart_sessionsCountOutputType
 */

export type Cart_sessionsCountOutputType = {
  guest_cart_items: number
}

export type Cart_sessionsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  guest_cart_items?: boolean | Cart_sessionsCountOutputTypeCountGuest_cart_itemsArgs
}

/**
 * Cart_sessionsCountOutputType without action
 */
export type Cart_sessionsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Cart_sessionsCountOutputType
   */
  select?: Prisma.Cart_sessionsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * Cart_sessionsCountOutputType without action
 */
export type Cart_sessionsCountOutputTypeCountGuest_cart_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.guest_cart_itemsWhereInput
}


export type cart_sessionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  session_id?: boolean
  created_at?: boolean
  updated_at?: boolean
  guest_cart_items?: boolean | Prisma.cart_sessions$guest_cart_itemsArgs<ExtArgs>
  _count?: boolean | Prisma.Cart_sessionsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["cart_sessions"]>

export type cart_sessionsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  session_id?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["cart_sessions"]>

export type cart_sessionsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  session_id?: boolean
  created_at?: boolean
  updated_at?: boolean
}, ExtArgs["result"]["cart_sessions"]>

export type cart_sessionsSelectScalar = {
  id?: boolean
  session_id?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type cart_sessionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "session_id" | "created_at" | "updated_at", ExtArgs["result"]["cart_sessions"]>
export type cart_sessionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  guest_cart_items?: boolean | Prisma.cart_sessions$guest_cart_itemsArgs<ExtArgs>
  _count?: boolean | Prisma.Cart_sessionsCountOutputTypeDefaultArgs<ExtArgs>
}
export type cart_sessionsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type cart_sessionsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $cart_sessionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "cart_sessions"
  objects: {
    guest_cart_items: Prisma.$guest_cart_itemsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    session_id: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["cart_sessions"]>
  composites: {}
}

export type cart_sessionsGetPayload<S extends boolean | null | undefined | cart_sessionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload, S>

export type cart_sessionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<cart_sessionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Cart_sessionsCountAggregateInputType | true
  }

export interface cart_sessionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cart_sessions'], meta: { name: 'cart_sessions' } }
  /**
   * Find zero or one Cart_sessions that matches the filter.
   * @param {cart_sessionsFindUniqueArgs} args - Arguments to find a Cart_sessions
   * @example
   * // Get one Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends cart_sessionsFindUniqueArgs>(args: Prisma.SelectSubset<T, cart_sessionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Cart_sessions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {cart_sessionsFindUniqueOrThrowArgs} args - Arguments to find a Cart_sessions
   * @example
   * // Get one Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends cart_sessionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, cart_sessionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cart_sessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cart_sessionsFindFirstArgs} args - Arguments to find a Cart_sessions
   * @example
   * // Get one Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends cart_sessionsFindFirstArgs>(args?: Prisma.SelectSubset<T, cart_sessionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Cart_sessions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cart_sessionsFindFirstOrThrowArgs} args - Arguments to find a Cart_sessions
   * @example
   * // Get one Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends cart_sessionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, cart_sessionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Cart_sessions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cart_sessionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.findMany()
   * 
   * // Get first 10 Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const cart_sessionsWithIdOnly = await prisma.cart_sessions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends cart_sessionsFindManyArgs>(args?: Prisma.SelectSubset<T, cart_sessionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Cart_sessions.
   * @param {cart_sessionsCreateArgs} args - Arguments to create a Cart_sessions.
   * @example
   * // Create one Cart_sessions
   * const Cart_sessions = await prisma.cart_sessions.create({
   *   data: {
   *     // ... data to create a Cart_sessions
   *   }
   * })
   * 
   */
  create<T extends cart_sessionsCreateArgs>(args: Prisma.SelectSubset<T, cart_sessionsCreateArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Cart_sessions.
   * @param {cart_sessionsCreateManyArgs} args - Arguments to create many Cart_sessions.
   * @example
   * // Create many Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends cart_sessionsCreateManyArgs>(args?: Prisma.SelectSubset<T, cart_sessionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Cart_sessions and returns the data saved in the database.
   * @param {cart_sessionsCreateManyAndReturnArgs} args - Arguments to create many Cart_sessions.
   * @example
   * // Create many Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Cart_sessions and only return the `id`
   * const cart_sessionsWithIdOnly = await prisma.cart_sessions.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends cart_sessionsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, cart_sessionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Cart_sessions.
   * @param {cart_sessionsDeleteArgs} args - Arguments to delete one Cart_sessions.
   * @example
   * // Delete one Cart_sessions
   * const Cart_sessions = await prisma.cart_sessions.delete({
   *   where: {
   *     // ... filter to delete one Cart_sessions
   *   }
   * })
   * 
   */
  delete<T extends cart_sessionsDeleteArgs>(args: Prisma.SelectSubset<T, cart_sessionsDeleteArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Cart_sessions.
   * @param {cart_sessionsUpdateArgs} args - Arguments to update one Cart_sessions.
   * @example
   * // Update one Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends cart_sessionsUpdateArgs>(args: Prisma.SelectSubset<T, cart_sessionsUpdateArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Cart_sessions.
   * @param {cart_sessionsDeleteManyArgs} args - Arguments to filter Cart_sessions to delete.
   * @example
   * // Delete a few Cart_sessions
   * const { count } = await prisma.cart_sessions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends cart_sessionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, cart_sessionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cart_sessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cart_sessionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends cart_sessionsUpdateManyArgs>(args: Prisma.SelectSubset<T, cart_sessionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Cart_sessions and returns the data updated in the database.
   * @param {cart_sessionsUpdateManyAndReturnArgs} args - Arguments to update many Cart_sessions.
   * @example
   * // Update many Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Cart_sessions and only return the `id`
   * const cart_sessionsWithIdOnly = await prisma.cart_sessions.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends cart_sessionsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, cart_sessionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Cart_sessions.
   * @param {cart_sessionsUpsertArgs} args - Arguments to update or create a Cart_sessions.
   * @example
   * // Update or create a Cart_sessions
   * const cart_sessions = await prisma.cart_sessions.upsert({
   *   create: {
   *     // ... data to create a Cart_sessions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Cart_sessions we want to update
   *   }
   * })
   */
  upsert<T extends cart_sessionsUpsertArgs>(args: Prisma.SelectSubset<T, cart_sessionsUpsertArgs<ExtArgs>>): Prisma.Prisma__cart_sessionsClient<runtime.Types.Result.GetResult<Prisma.$cart_sessionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Cart_sessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cart_sessionsCountArgs} args - Arguments to filter Cart_sessions to count.
   * @example
   * // Count the number of Cart_sessions
   * const count = await prisma.cart_sessions.count({
   *   where: {
   *     // ... the filter for the Cart_sessions we want to count
   *   }
   * })
  **/
  count<T extends cart_sessionsCountArgs>(
    args?: Prisma.Subset<T, cart_sessionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Cart_sessionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Cart_sessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Cart_sessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Cart_sessionsAggregateArgs>(args: Prisma.Subset<T, Cart_sessionsAggregateArgs>): Prisma.PrismaPromise<GetCart_sessionsAggregateType<T>>

  /**
   * Group by Cart_sessions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {cart_sessionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends cart_sessionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: cart_sessionsGroupByArgs['orderBy'] }
      : { orderBy?: cart_sessionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, cart_sessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCart_sessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the cart_sessions model
 */
readonly fields: cart_sessionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for cart_sessions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__cart_sessionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  guest_cart_items<T extends Prisma.cart_sessions$guest_cart_itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.cart_sessions$guest_cart_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$guest_cart_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the cart_sessions model
 */
export interface cart_sessionsFieldRefs {
  readonly id: Prisma.FieldRef<"cart_sessions", 'BigInt'>
  readonly session_id: Prisma.FieldRef<"cart_sessions", 'String'>
  readonly created_at: Prisma.FieldRef<"cart_sessions", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"cart_sessions", 'DateTime'>
}
    

// Custom InputTypes
/**
 * cart_sessions findUnique
 */
export type cart_sessionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * Filter, which cart_sessions to fetch.
   */
  where: Prisma.cart_sessionsWhereUniqueInput
}

/**
 * cart_sessions findUniqueOrThrow
 */
export type cart_sessionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * Filter, which cart_sessions to fetch.
   */
  where: Prisma.cart_sessionsWhereUniqueInput
}

/**
 * cart_sessions findFirst
 */
export type cart_sessionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * Filter, which cart_sessions to fetch.
   */
  where?: Prisma.cart_sessionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cart_sessions to fetch.
   */
  orderBy?: Prisma.cart_sessionsOrderByWithRelationInput | Prisma.cart_sessionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for cart_sessions.
   */
  cursor?: Prisma.cart_sessionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cart_sessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cart_sessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of cart_sessions.
   */
  distinct?: Prisma.Cart_sessionsScalarFieldEnum | Prisma.Cart_sessionsScalarFieldEnum[]
}

/**
 * cart_sessions findFirstOrThrow
 */
export type cart_sessionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * Filter, which cart_sessions to fetch.
   */
  where?: Prisma.cart_sessionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cart_sessions to fetch.
   */
  orderBy?: Prisma.cart_sessionsOrderByWithRelationInput | Prisma.cart_sessionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for cart_sessions.
   */
  cursor?: Prisma.cart_sessionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cart_sessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cart_sessions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of cart_sessions.
   */
  distinct?: Prisma.Cart_sessionsScalarFieldEnum | Prisma.Cart_sessionsScalarFieldEnum[]
}

/**
 * cart_sessions findMany
 */
export type cart_sessionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * Filter, which cart_sessions to fetch.
   */
  where?: Prisma.cart_sessionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of cart_sessions to fetch.
   */
  orderBy?: Prisma.cart_sessionsOrderByWithRelationInput | Prisma.cart_sessionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing cart_sessions.
   */
  cursor?: Prisma.cart_sessionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` cart_sessions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` cart_sessions.
   */
  skip?: number
  distinct?: Prisma.Cart_sessionsScalarFieldEnum | Prisma.Cart_sessionsScalarFieldEnum[]
}

/**
 * cart_sessions create
 */
export type cart_sessionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * The data needed to create a cart_sessions.
   */
  data: Prisma.XOR<Prisma.cart_sessionsCreateInput, Prisma.cart_sessionsUncheckedCreateInput>
}

/**
 * cart_sessions createMany
 */
export type cart_sessionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many cart_sessions.
   */
  data: Prisma.cart_sessionsCreateManyInput | Prisma.cart_sessionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * cart_sessions createManyAndReturn
 */
export type cart_sessionsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * The data used to create many cart_sessions.
   */
  data: Prisma.cart_sessionsCreateManyInput | Prisma.cart_sessionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * cart_sessions update
 */
export type cart_sessionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * The data needed to update a cart_sessions.
   */
  data: Prisma.XOR<Prisma.cart_sessionsUpdateInput, Prisma.cart_sessionsUncheckedUpdateInput>
  /**
   * Choose, which cart_sessions to update.
   */
  where: Prisma.cart_sessionsWhereUniqueInput
}

/**
 * cart_sessions updateMany
 */
export type cart_sessionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update cart_sessions.
   */
  data: Prisma.XOR<Prisma.cart_sessionsUpdateManyMutationInput, Prisma.cart_sessionsUncheckedUpdateManyInput>
  /**
   * Filter which cart_sessions to update
   */
  where?: Prisma.cart_sessionsWhereInput
  /**
   * Limit how many cart_sessions to update.
   */
  limit?: number
}

/**
 * cart_sessions updateManyAndReturn
 */
export type cart_sessionsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * The data used to update cart_sessions.
   */
  data: Prisma.XOR<Prisma.cart_sessionsUpdateManyMutationInput, Prisma.cart_sessionsUncheckedUpdateManyInput>
  /**
   * Filter which cart_sessions to update
   */
  where?: Prisma.cart_sessionsWhereInput
  /**
   * Limit how many cart_sessions to update.
   */
  limit?: number
}

/**
 * cart_sessions upsert
 */
export type cart_sessionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * The filter to search for the cart_sessions to update in case it exists.
   */
  where: Prisma.cart_sessionsWhereUniqueInput
  /**
   * In case the cart_sessions found by the `where` argument doesn't exist, create a new cart_sessions with this data.
   */
  create: Prisma.XOR<Prisma.cart_sessionsCreateInput, Prisma.cart_sessionsUncheckedCreateInput>
  /**
   * In case the cart_sessions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.cart_sessionsUpdateInput, Prisma.cart_sessionsUncheckedUpdateInput>
}

/**
 * cart_sessions delete
 */
export type cart_sessionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
  /**
   * Filter which cart_sessions to delete.
   */
  where: Prisma.cart_sessionsWhereUniqueInput
}

/**
 * cart_sessions deleteMany
 */
export type cart_sessionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which cart_sessions to delete
   */
  where?: Prisma.cart_sessionsWhereInput
  /**
   * Limit how many cart_sessions to delete.
   */
  limit?: number
}

/**
 * cart_sessions.guest_cart_items
 */
export type cart_sessions$guest_cart_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the guest_cart_items
   */
  select?: Prisma.guest_cart_itemsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the guest_cart_items
   */
  omit?: Prisma.guest_cart_itemsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.guest_cart_itemsInclude<ExtArgs> | null
  where?: Prisma.guest_cart_itemsWhereInput
  orderBy?: Prisma.guest_cart_itemsOrderByWithRelationInput | Prisma.guest_cart_itemsOrderByWithRelationInput[]
  cursor?: Prisma.guest_cart_itemsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Guest_cart_itemsScalarFieldEnum | Prisma.Guest_cart_itemsScalarFieldEnum[]
}

/**
 * cart_sessions without action
 */
export type cart_sessionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_sessions
   */
  select?: Prisma.cart_sessionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_sessions
   */
  omit?: Prisma.cart_sessionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_sessionsInclude<ExtArgs> | null
}
