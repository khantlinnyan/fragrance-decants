
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `orders` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model orders
 * 
 */
export type ordersModel = runtime.Types.Result.DefaultSelection<Prisma.$ordersPayload>

export type AggregateOrders = {
  _count: OrdersCountAggregateOutputType | null
  _avg: OrdersAvgAggregateOutputType | null
  _sum: OrdersSumAggregateOutputType | null
  _min: OrdersMinAggregateOutputType | null
  _max: OrdersMaxAggregateOutputType | null
}

export type OrdersAvgAggregateOutputType = {
  id: number | null
  user_id: number | null
  total_amount: number | null
}

export type OrdersSumAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  total_amount: number | null
}

export type OrdersMinAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  total_amount: number | null
  status: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type OrdersMaxAggregateOutputType = {
  id: bigint | null
  user_id: bigint | null
  total_amount: number | null
  status: string | null
  created_at: Date | null
  updated_at: Date | null
}

export type OrdersCountAggregateOutputType = {
  id: number
  user_id: number
  total_amount: number
  status: number
  created_at: number
  updated_at: number
  _all: number
}


export type OrdersAvgAggregateInputType = {
  id?: true
  user_id?: true
  total_amount?: true
}

export type OrdersSumAggregateInputType = {
  id?: true
  user_id?: true
  total_amount?: true
}

export type OrdersMinAggregateInputType = {
  id?: true
  user_id?: true
  total_amount?: true
  status?: true
  created_at?: true
  updated_at?: true
}

export type OrdersMaxAggregateInputType = {
  id?: true
  user_id?: true
  total_amount?: true
  status?: true
  created_at?: true
  updated_at?: true
}

export type OrdersCountAggregateInputType = {
  id?: true
  user_id?: true
  total_amount?: true
  status?: true
  created_at?: true
  updated_at?: true
  _all?: true
}

export type OrdersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which orders to aggregate.
   */
  where?: Prisma.ordersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of orders to fetch.
   */
  orderBy?: Prisma.ordersOrderByWithRelationInput | Prisma.ordersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ordersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` orders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` orders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned orders
  **/
  _count?: true | OrdersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OrdersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OrdersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrdersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrdersMaxAggregateInputType
}

export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
      [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrders[P]>
    : Prisma.GetScalarType<T[P], AggregateOrders[P]>
}




export type ordersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ordersWhereInput
  orderBy?: Prisma.ordersOrderByWithAggregationInput | Prisma.ordersOrderByWithAggregationInput[]
  by: Prisma.OrdersScalarFieldEnum[] | Prisma.OrdersScalarFieldEnum
  having?: Prisma.ordersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrdersCountAggregateInputType | true
  _avg?: OrdersAvgAggregateInputType
  _sum?: OrdersSumAggregateInputType
  _min?: OrdersMinAggregateInputType
  _max?: OrdersMaxAggregateInputType
}

export type OrdersGroupByOutputType = {
  id: bigint
  user_id: bigint
  total_amount: number
  status: string
  created_at: Date
  updated_at: Date
  _count: OrdersCountAggregateOutputType | null
  _avg: OrdersAvgAggregateOutputType | null
  _sum: OrdersSumAggregateOutputType | null
  _min: OrdersMinAggregateOutputType | null
  _max: OrdersMaxAggregateOutputType | null
}

type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrdersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrdersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrdersGroupByOutputType[P]>
      }
    >
  >



export type ordersWhereInput = {
  AND?: Prisma.ordersWhereInput | Prisma.ordersWhereInput[]
  OR?: Prisma.ordersWhereInput[]
  NOT?: Prisma.ordersWhereInput | Prisma.ordersWhereInput[]
  id?: Prisma.BigIntFilter<"orders"> | bigint | number
  user_id?: Prisma.BigIntFilter<"orders"> | bigint | number
  total_amount?: Prisma.FloatFilter<"orders"> | number
  status?: Prisma.StringFilter<"orders"> | string
  created_at?: Prisma.DateTimeFilter<"orders"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"orders"> | Date | string
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
  order_items?: Prisma.Order_itemsListRelationFilter
}

export type ordersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  user?: Prisma.usersOrderByWithRelationInput
  order_items?: Prisma.order_itemsOrderByRelationAggregateInput
}

export type ordersWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.ordersWhereInput | Prisma.ordersWhereInput[]
  OR?: Prisma.ordersWhereInput[]
  NOT?: Prisma.ordersWhereInput | Prisma.ordersWhereInput[]
  user_id?: Prisma.BigIntFilter<"orders"> | bigint | number
  total_amount?: Prisma.FloatFilter<"orders"> | number
  status?: Prisma.StringFilter<"orders"> | string
  created_at?: Prisma.DateTimeFilter<"orders"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"orders"> | Date | string
  user?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
  order_items?: Prisma.Order_itemsListRelationFilter
}, "id">

export type ordersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
  _count?: Prisma.ordersCountOrderByAggregateInput
  _avg?: Prisma.ordersAvgOrderByAggregateInput
  _max?: Prisma.ordersMaxOrderByAggregateInput
  _min?: Prisma.ordersMinOrderByAggregateInput
  _sum?: Prisma.ordersSumOrderByAggregateInput
}

export type ordersScalarWhereWithAggregatesInput = {
  AND?: Prisma.ordersScalarWhereWithAggregatesInput | Prisma.ordersScalarWhereWithAggregatesInput[]
  OR?: Prisma.ordersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ordersScalarWhereWithAggregatesInput | Prisma.ordersScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"orders"> | bigint | number
  user_id?: Prisma.BigIntWithAggregatesFilter<"orders"> | bigint | number
  total_amount?: Prisma.FloatWithAggregatesFilter<"orders"> | number
  status?: Prisma.StringWithAggregatesFilter<"orders"> | string
  created_at?: Prisma.DateTimeWithAggregatesFilter<"orders"> | Date | string
  updated_at?: Prisma.DateTimeWithAggregatesFilter<"orders"> | Date | string
}

export type ordersCreateInput = {
  id?: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
  user: Prisma.usersCreateNestedOneWithoutOrdersInput
  order_items?: Prisma.order_itemsCreateNestedManyWithoutOrderInput
}

export type ordersUncheckedCreateInput = {
  id?: bigint | number
  user_id: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
  order_items?: Prisma.order_itemsUncheckedCreateNestedManyWithoutOrderInput
}

export type ordersUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.usersUpdateOneRequiredWithoutOrdersNestedInput
  order_items?: Prisma.order_itemsUpdateManyWithoutOrderNestedInput
}

export type ordersUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  order_items?: Prisma.order_itemsUncheckedUpdateManyWithoutOrderNestedInput
}

export type ordersCreateManyInput = {
  id?: bigint | number
  user_id: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ordersUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ordersUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type OrdersListRelationFilter = {
  every?: Prisma.ordersWhereInput
  some?: Prisma.ordersWhereInput
  none?: Prisma.ordersWhereInput
}

export type ordersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ordersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ordersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
}

export type ordersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ordersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
  updated_at?: Prisma.SortOrder
}

export type ordersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
}

export type OrdersScalarRelationFilter = {
  is?: Prisma.ordersWhereInput
  isNot?: Prisma.ordersWhereInput
}

export type ordersCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ordersCreateWithoutUserInput, Prisma.ordersUncheckedCreateWithoutUserInput> | Prisma.ordersCreateWithoutUserInput[] | Prisma.ordersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ordersCreateOrConnectWithoutUserInput | Prisma.ordersCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ordersCreateManyUserInputEnvelope
  connect?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
}

export type ordersUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ordersCreateWithoutUserInput, Prisma.ordersUncheckedCreateWithoutUserInput> | Prisma.ordersCreateWithoutUserInput[] | Prisma.ordersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ordersCreateOrConnectWithoutUserInput | Prisma.ordersCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ordersCreateManyUserInputEnvelope
  connect?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
}

export type ordersUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ordersCreateWithoutUserInput, Prisma.ordersUncheckedCreateWithoutUserInput> | Prisma.ordersCreateWithoutUserInput[] | Prisma.ordersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ordersCreateOrConnectWithoutUserInput | Prisma.ordersCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ordersUpsertWithWhereUniqueWithoutUserInput | Prisma.ordersUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ordersCreateManyUserInputEnvelope
  set?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  disconnect?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  delete?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  connect?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  update?: Prisma.ordersUpdateWithWhereUniqueWithoutUserInput | Prisma.ordersUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ordersUpdateManyWithWhereWithoutUserInput | Prisma.ordersUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ordersScalarWhereInput | Prisma.ordersScalarWhereInput[]
}

export type ordersUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ordersCreateWithoutUserInput, Prisma.ordersUncheckedCreateWithoutUserInput> | Prisma.ordersCreateWithoutUserInput[] | Prisma.ordersUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ordersCreateOrConnectWithoutUserInput | Prisma.ordersCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ordersUpsertWithWhereUniqueWithoutUserInput | Prisma.ordersUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ordersCreateManyUserInputEnvelope
  set?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  disconnect?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  delete?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  connect?: Prisma.ordersWhereUniqueInput | Prisma.ordersWhereUniqueInput[]
  update?: Prisma.ordersUpdateWithWhereUniqueWithoutUserInput | Prisma.ordersUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ordersUpdateManyWithWhereWithoutUserInput | Prisma.ordersUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ordersScalarWhereInput | Prisma.ordersScalarWhereInput[]
}

export type ordersCreateNestedOneWithoutOrder_itemsInput = {
  create?: Prisma.XOR<Prisma.ordersCreateWithoutOrder_itemsInput, Prisma.ordersUncheckedCreateWithoutOrder_itemsInput>
  connectOrCreate?: Prisma.ordersCreateOrConnectWithoutOrder_itemsInput
  connect?: Prisma.ordersWhereUniqueInput
}

export type ordersUpdateOneRequiredWithoutOrder_itemsNestedInput = {
  create?: Prisma.XOR<Prisma.ordersCreateWithoutOrder_itemsInput, Prisma.ordersUncheckedCreateWithoutOrder_itemsInput>
  connectOrCreate?: Prisma.ordersCreateOrConnectWithoutOrder_itemsInput
  upsert?: Prisma.ordersUpsertWithoutOrder_itemsInput
  connect?: Prisma.ordersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ordersUpdateToOneWithWhereWithoutOrder_itemsInput, Prisma.ordersUpdateWithoutOrder_itemsInput>, Prisma.ordersUncheckedUpdateWithoutOrder_itemsInput>
}

export type ordersCreateWithoutUserInput = {
  id?: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
  order_items?: Prisma.order_itemsCreateNestedManyWithoutOrderInput
}

export type ordersUncheckedCreateWithoutUserInput = {
  id?: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
  order_items?: Prisma.order_itemsUncheckedCreateNestedManyWithoutOrderInput
}

export type ordersCreateOrConnectWithoutUserInput = {
  where: Prisma.ordersWhereUniqueInput
  create: Prisma.XOR<Prisma.ordersCreateWithoutUserInput, Prisma.ordersUncheckedCreateWithoutUserInput>
}

export type ordersCreateManyUserInputEnvelope = {
  data: Prisma.ordersCreateManyUserInput | Prisma.ordersCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type ordersUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ordersWhereUniqueInput
  update: Prisma.XOR<Prisma.ordersUpdateWithoutUserInput, Prisma.ordersUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ordersCreateWithoutUserInput, Prisma.ordersUncheckedCreateWithoutUserInput>
}

export type ordersUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ordersWhereUniqueInput
  data: Prisma.XOR<Prisma.ordersUpdateWithoutUserInput, Prisma.ordersUncheckedUpdateWithoutUserInput>
}

export type ordersUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ordersScalarWhereInput
  data: Prisma.XOR<Prisma.ordersUpdateManyMutationInput, Prisma.ordersUncheckedUpdateManyWithoutUserInput>
}

export type ordersScalarWhereInput = {
  AND?: Prisma.ordersScalarWhereInput | Prisma.ordersScalarWhereInput[]
  OR?: Prisma.ordersScalarWhereInput[]
  NOT?: Prisma.ordersScalarWhereInput | Prisma.ordersScalarWhereInput[]
  id?: Prisma.BigIntFilter<"orders"> | bigint | number
  user_id?: Prisma.BigIntFilter<"orders"> | bigint | number
  total_amount?: Prisma.FloatFilter<"orders"> | number
  status?: Prisma.StringFilter<"orders"> | string
  created_at?: Prisma.DateTimeFilter<"orders"> | Date | string
  updated_at?: Prisma.DateTimeFilter<"orders"> | Date | string
}

export type ordersCreateWithoutOrder_itemsInput = {
  id?: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
  user: Prisma.usersCreateNestedOneWithoutOrdersInput
}

export type ordersUncheckedCreateWithoutOrder_itemsInput = {
  id?: bigint | number
  user_id: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ordersCreateOrConnectWithoutOrder_itemsInput = {
  where: Prisma.ordersWhereUniqueInput
  create: Prisma.XOR<Prisma.ordersCreateWithoutOrder_itemsInput, Prisma.ordersUncheckedCreateWithoutOrder_itemsInput>
}

export type ordersUpsertWithoutOrder_itemsInput = {
  update: Prisma.XOR<Prisma.ordersUpdateWithoutOrder_itemsInput, Prisma.ordersUncheckedUpdateWithoutOrder_itemsInput>
  create: Prisma.XOR<Prisma.ordersCreateWithoutOrder_itemsInput, Prisma.ordersUncheckedCreateWithoutOrder_itemsInput>
  where?: Prisma.ordersWhereInput
}

export type ordersUpdateToOneWithWhereWithoutOrder_itemsInput = {
  where?: Prisma.ordersWhereInput
  data: Prisma.XOR<Prisma.ordersUpdateWithoutOrder_itemsInput, Prisma.ordersUncheckedUpdateWithoutOrder_itemsInput>
}

export type ordersUpdateWithoutOrder_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.usersUpdateOneRequiredWithoutOrdersNestedInput
}

export type ordersUncheckedUpdateWithoutOrder_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  user_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ordersCreateManyUserInput = {
  id?: bigint | number
  total_amount: number
  status?: string
  created_at?: Date | string
  updated_at?: Date | string
}

export type ordersUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  order_items?: Prisma.order_itemsUpdateManyWithoutOrderNestedInput
}

export type ordersUncheckedUpdateWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  order_items?: Prisma.order_itemsUncheckedUpdateManyWithoutOrderNestedInput
}

export type ordersUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  total_amount?: Prisma.FloatFieldUpdateOperationsInput | number
  status?: Prisma.StringFieldUpdateOperationsInput | string
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updated_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type OrdersCountOutputType
 */

export type OrdersCountOutputType = {
  order_items: number
}

export type OrdersCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order_items?: boolean | OrdersCountOutputTypeCountOrder_itemsArgs
}

/**
 * OrdersCountOutputType without action
 */
export type OrdersCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrdersCountOutputType
   */
  select?: Prisma.OrdersCountOutputTypeSelect<ExtArgs> | null
}

/**
 * OrdersCountOutputType without action
 */
export type OrdersCountOutputTypeCountOrder_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.order_itemsWhereInput
}


export type ordersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  total_amount?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  order_items?: boolean | Prisma.orders$order_itemsArgs<ExtArgs>
  _count?: boolean | Prisma.OrdersCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orders"]>

export type ordersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  total_amount?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orders"]>

export type ordersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  user_id?: boolean
  total_amount?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orders"]>

export type ordersSelectScalar = {
  id?: boolean
  user_id?: boolean
  total_amount?: boolean
  status?: boolean
  created_at?: boolean
  updated_at?: boolean
}

export type ordersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "user_id" | "total_amount" | "status" | "created_at" | "updated_at", ExtArgs["result"]["orders"]>
export type ordersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  order_items?: boolean | Prisma.orders$order_itemsArgs<ExtArgs>
  _count?: boolean | Prisma.OrdersCountOutputTypeDefaultArgs<ExtArgs>
}
export type ordersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type ordersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $ordersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "orders"
  objects: {
    user: Prisma.$usersPayload<ExtArgs>
    order_items: Prisma.$order_itemsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    user_id: bigint
    total_amount: number
    status: string
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["orders"]>
  composites: {}
}

export type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ordersPayload, S>

export type ordersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrdersCountAggregateInputType | true
  }

export interface ordersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
  /**
   * Find zero or one Orders that matches the filter.
   * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
   * @example
   * // Get one Orders
   * const orders = await prisma.orders.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ordersFindUniqueArgs>(args: Prisma.SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Orders that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
   * @example
   * // Get one Orders
   * const orders = await prisma.orders.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Orders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ordersFindFirstArgs} args - Arguments to find a Orders
   * @example
   * // Get one Orders
   * const orders = await prisma.orders.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ordersFindFirstArgs>(args?: Prisma.SelectSubset<T, ordersFindFirstArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Orders that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
   * @example
   * // Get one Orders
   * const orders = await prisma.orders.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Orders that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Orders
   * const orders = await prisma.orders.findMany()
   * 
   * // Get first 10 Orders
   * const orders = await prisma.orders.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const ordersWithIdOnly = await prisma.orders.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ordersFindManyArgs>(args?: Prisma.SelectSubset<T, ordersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Orders.
   * @param {ordersCreateArgs} args - Arguments to create a Orders.
   * @example
   * // Create one Orders
   * const Orders = await prisma.orders.create({
   *   data: {
   *     // ... data to create a Orders
   *   }
   * })
   * 
   */
  create<T extends ordersCreateArgs>(args: Prisma.SelectSubset<T, ordersCreateArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Orders.
   * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
   * @example
   * // Create many Orders
   * const orders = await prisma.orders.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ordersCreateManyArgs>(args?: Prisma.SelectSubset<T, ordersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Orders and returns the data saved in the database.
   * @param {ordersCreateManyAndReturnArgs} args - Arguments to create many Orders.
   * @example
   * // Create many Orders
   * const orders = await prisma.orders.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Orders and only return the `id`
   * const ordersWithIdOnly = await prisma.orders.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ordersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ordersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Orders.
   * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
   * @example
   * // Delete one Orders
   * const Orders = await prisma.orders.delete({
   *   where: {
   *     // ... filter to delete one Orders
   *   }
   * })
   * 
   */
  delete<T extends ordersDeleteArgs>(args: Prisma.SelectSubset<T, ordersDeleteArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Orders.
   * @param {ordersUpdateArgs} args - Arguments to update one Orders.
   * @example
   * // Update one Orders
   * const orders = await prisma.orders.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ordersUpdateArgs>(args: Prisma.SelectSubset<T, ordersUpdateArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Orders.
   * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
   * @example
   * // Delete a few Orders
   * const { count } = await prisma.orders.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ordersDeleteManyArgs>(args?: Prisma.SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Orders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Orders
   * const orders = await prisma.orders.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ordersUpdateManyArgs>(args: Prisma.SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Orders and returns the data updated in the database.
   * @param {ordersUpdateManyAndReturnArgs} args - Arguments to update many Orders.
   * @example
   * // Update many Orders
   * const orders = await prisma.orders.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Orders and only return the `id`
   * const ordersWithIdOnly = await prisma.orders.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ordersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ordersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Orders.
   * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
   * @example
   * // Update or create a Orders
   * const orders = await prisma.orders.upsert({
   *   create: {
   *     // ... data to create a Orders
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Orders we want to update
   *   }
   * })
   */
  upsert<T extends ordersUpsertArgs>(args: Prisma.SelectSubset<T, ordersUpsertArgs<ExtArgs>>): Prisma.Prisma__ordersClient<runtime.Types.Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Orders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ordersCountArgs} args - Arguments to filter Orders to count.
   * @example
   * // Count the number of Orders
   * const count = await prisma.orders.count({
   *   where: {
   *     // ... the filter for the Orders we want to count
   *   }
   * })
  **/
  count<T extends ordersCountArgs>(
    args?: Prisma.Subset<T, ordersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrdersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Orders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrdersAggregateArgs>(args: Prisma.Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

  /**
   * Group by Orders.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ordersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ordersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ordersGroupByArgs['orderBy'] }
      : { orderBy?: ordersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the orders model
 */
readonly fields: ordersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for orders.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ordersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  order_items<T extends Prisma.orders$order_itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.orders$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the orders model
 */
export interface ordersFieldRefs {
  readonly id: Prisma.FieldRef<"orders", 'BigInt'>
  readonly user_id: Prisma.FieldRef<"orders", 'BigInt'>
  readonly total_amount: Prisma.FieldRef<"orders", 'Float'>
  readonly status: Prisma.FieldRef<"orders", 'String'>
  readonly created_at: Prisma.FieldRef<"orders", 'DateTime'>
  readonly updated_at: Prisma.FieldRef<"orders", 'DateTime'>
}
    

// Custom InputTypes
/**
 * orders findUnique
 */
export type ordersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * Filter, which orders to fetch.
   */
  where: Prisma.ordersWhereUniqueInput
}

/**
 * orders findUniqueOrThrow
 */
export type ordersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * Filter, which orders to fetch.
   */
  where: Prisma.ordersWhereUniqueInput
}

/**
 * orders findFirst
 */
export type ordersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * Filter, which orders to fetch.
   */
  where?: Prisma.ordersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of orders to fetch.
   */
  orderBy?: Prisma.ordersOrderByWithRelationInput | Prisma.ordersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for orders.
   */
  cursor?: Prisma.ordersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` orders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` orders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of orders.
   */
  distinct?: Prisma.OrdersScalarFieldEnum | Prisma.OrdersScalarFieldEnum[]
}

/**
 * orders findFirstOrThrow
 */
export type ordersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * Filter, which orders to fetch.
   */
  where?: Prisma.ordersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of orders to fetch.
   */
  orderBy?: Prisma.ordersOrderByWithRelationInput | Prisma.ordersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for orders.
   */
  cursor?: Prisma.ordersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` orders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` orders.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of orders.
   */
  distinct?: Prisma.OrdersScalarFieldEnum | Prisma.OrdersScalarFieldEnum[]
}

/**
 * orders findMany
 */
export type ordersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * Filter, which orders to fetch.
   */
  where?: Prisma.ordersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of orders to fetch.
   */
  orderBy?: Prisma.ordersOrderByWithRelationInput | Prisma.ordersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing orders.
   */
  cursor?: Prisma.ordersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` orders from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` orders.
   */
  skip?: number
  distinct?: Prisma.OrdersScalarFieldEnum | Prisma.OrdersScalarFieldEnum[]
}

/**
 * orders create
 */
export type ordersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * The data needed to create a orders.
   */
  data: Prisma.XOR<Prisma.ordersCreateInput, Prisma.ordersUncheckedCreateInput>
}

/**
 * orders createMany
 */
export type ordersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many orders.
   */
  data: Prisma.ordersCreateManyInput | Prisma.ordersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * orders createManyAndReturn
 */
export type ordersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * The data used to create many orders.
   */
  data: Prisma.ordersCreateManyInput | Prisma.ordersCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * orders update
 */
export type ordersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * The data needed to update a orders.
   */
  data: Prisma.XOR<Prisma.ordersUpdateInput, Prisma.ordersUncheckedUpdateInput>
  /**
   * Choose, which orders to update.
   */
  where: Prisma.ordersWhereUniqueInput
}

/**
 * orders updateMany
 */
export type ordersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update orders.
   */
  data: Prisma.XOR<Prisma.ordersUpdateManyMutationInput, Prisma.ordersUncheckedUpdateManyInput>
  /**
   * Filter which orders to update
   */
  where?: Prisma.ordersWhereInput
  /**
   * Limit how many orders to update.
   */
  limit?: number
}

/**
 * orders updateManyAndReturn
 */
export type ordersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * The data used to update orders.
   */
  data: Prisma.XOR<Prisma.ordersUpdateManyMutationInput, Prisma.ordersUncheckedUpdateManyInput>
  /**
   * Filter which orders to update
   */
  where?: Prisma.ordersWhereInput
  /**
   * Limit how many orders to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * orders upsert
 */
export type ordersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * The filter to search for the orders to update in case it exists.
   */
  where: Prisma.ordersWhereUniqueInput
  /**
   * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
   */
  create: Prisma.XOR<Prisma.ordersCreateInput, Prisma.ordersUncheckedCreateInput>
  /**
   * In case the orders was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ordersUpdateInput, Prisma.ordersUncheckedUpdateInput>
}

/**
 * orders delete
 */
export type ordersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
  /**
   * Filter which orders to delete.
   */
  where: Prisma.ordersWhereUniqueInput
}

/**
 * orders deleteMany
 */
export type ordersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which orders to delete
   */
  where?: Prisma.ordersWhereInput
  /**
   * Limit how many orders to delete.
   */
  limit?: number
}

/**
 * orders.order_items
 */
export type orders$order_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the order_items
   */
  select?: Prisma.order_itemsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the order_items
   */
  omit?: Prisma.order_itemsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.order_itemsInclude<ExtArgs> | null
  where?: Prisma.order_itemsWhereInput
  orderBy?: Prisma.order_itemsOrderByWithRelationInput | Prisma.order_itemsOrderByWithRelationInput[]
  cursor?: Prisma.order_itemsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Order_itemsScalarFieldEnum | Prisma.Order_itemsScalarFieldEnum[]
}

/**
 * orders without action
 */
export type ordersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the orders
   */
  select?: Prisma.ordersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the orders
   */
  omit?: Prisma.ordersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ordersInclude<ExtArgs> | null
}
