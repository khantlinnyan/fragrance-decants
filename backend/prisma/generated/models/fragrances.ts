
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `fragrances` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model fragrances
 * 
 */
export type fragrancesModel = runtime.Types.Result.DefaultSelection<Prisma.$fragrancesPayload>

export type AggregateFragrances = {
  _count: FragrancesCountAggregateOutputType | null
  _avg: FragrancesAvgAggregateOutputType | null
  _sum: FragrancesSumAggregateOutputType | null
  _min: FragrancesMinAggregateOutputType | null
  _max: FragrancesMaxAggregateOutputType | null
}

export type FragrancesAvgAggregateOutputType = {
  id: number | null
  brand_id: number | null
}

export type FragrancesSumAggregateOutputType = {
  id: bigint | null
  brand_id: bigint | null
}

export type FragrancesMinAggregateOutputType = {
  id: bigint | null
  brand_id: bigint | null
  name: string | null
  description: string | null
  scent_family: string | null
  top_notes: string | null
  middle_notes: string | null
  base_notes: string | null
  image_url: string | null
  created_at: Date | null
}

export type FragrancesMaxAggregateOutputType = {
  id: bigint | null
  brand_id: bigint | null
  name: string | null
  description: string | null
  scent_family: string | null
  top_notes: string | null
  middle_notes: string | null
  base_notes: string | null
  image_url: string | null
  created_at: Date | null
}

export type FragrancesCountAggregateOutputType = {
  id: number
  brand_id: number
  name: number
  description: number
  scent_family: number
  top_notes: number
  middle_notes: number
  base_notes: number
  image_url: number
  created_at: number
  _all: number
}


export type FragrancesAvgAggregateInputType = {
  id?: true
  brand_id?: true
}

export type FragrancesSumAggregateInputType = {
  id?: true
  brand_id?: true
}

export type FragrancesMinAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  description?: true
  scent_family?: true
  top_notes?: true
  middle_notes?: true
  base_notes?: true
  image_url?: true
  created_at?: true
}

export type FragrancesMaxAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  description?: true
  scent_family?: true
  top_notes?: true
  middle_notes?: true
  base_notes?: true
  image_url?: true
  created_at?: true
}

export type FragrancesCountAggregateInputType = {
  id?: true
  brand_id?: true
  name?: true
  description?: true
  scent_family?: true
  top_notes?: true
  middle_notes?: true
  base_notes?: true
  image_url?: true
  created_at?: true
  _all?: true
}

export type FragrancesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which fragrances to aggregate.
   */
  where?: Prisma.fragrancesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrances to fetch.
   */
  orderBy?: Prisma.fragrancesOrderByWithRelationInput | Prisma.fragrancesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.fragrancesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned fragrances
  **/
  _count?: true | FragrancesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FragrancesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FragrancesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FragrancesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FragrancesMaxAggregateInputType
}

export type GetFragrancesAggregateType<T extends FragrancesAggregateArgs> = {
      [P in keyof T & keyof AggregateFragrances]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFragrances[P]>
    : Prisma.GetScalarType<T[P], AggregateFragrances[P]>
}




export type fragrancesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.fragrancesWhereInput
  orderBy?: Prisma.fragrancesOrderByWithAggregationInput | Prisma.fragrancesOrderByWithAggregationInput[]
  by: Prisma.FragrancesScalarFieldEnum[] | Prisma.FragrancesScalarFieldEnum
  having?: Prisma.fragrancesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FragrancesCountAggregateInputType | true
  _avg?: FragrancesAvgAggregateInputType
  _sum?: FragrancesSumAggregateInputType
  _min?: FragrancesMinAggregateInputType
  _max?: FragrancesMaxAggregateInputType
}

export type FragrancesGroupByOutputType = {
  id: bigint
  brand_id: bigint
  name: string
  description: string | null
  scent_family: string | null
  top_notes: string | null
  middle_notes: string | null
  base_notes: string | null
  image_url: string | null
  created_at: Date
  _count: FragrancesCountAggregateOutputType | null
  _avg: FragrancesAvgAggregateOutputType | null
  _sum: FragrancesSumAggregateOutputType | null
  _min: FragrancesMinAggregateOutputType | null
  _max: FragrancesMaxAggregateOutputType | null
}

type GetFragrancesGroupByPayload<T extends fragrancesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FragrancesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FragrancesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FragrancesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FragrancesGroupByOutputType[P]>
      }
    >
  >



export type fragrancesWhereInput = {
  AND?: Prisma.fragrancesWhereInput | Prisma.fragrancesWhereInput[]
  OR?: Prisma.fragrancesWhereInput[]
  NOT?: Prisma.fragrancesWhereInput | Prisma.fragrancesWhereInput[]
  id?: Prisma.BigIntFilter<"fragrances"> | bigint | number
  brand_id?: Prisma.BigIntFilter<"fragrances"> | bigint | number
  name?: Prisma.StringFilter<"fragrances"> | string
  description?: Prisma.StringNullableFilter<"fragrances"> | string | null
  scent_family?: Prisma.StringNullableFilter<"fragrances"> | string | null
  top_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  middle_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  base_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  image_url?: Prisma.StringNullableFilter<"fragrances"> | string | null
  created_at?: Prisma.DateTimeFilter<"fragrances"> | Date | string
  brand?: Prisma.XOR<Prisma.BrandsScalarRelationFilter, Prisma.brandsWhereInput>
  fragrance_decant_prices?: Prisma.Fragrance_decant_pricesListRelationFilter
  cart_items?: Prisma.Cart_itemsListRelationFilter
  order_items?: Prisma.Order_itemsListRelationFilter
}

export type fragrancesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  scent_family?: Prisma.SortOrderInput | Prisma.SortOrder
  top_notes?: Prisma.SortOrderInput | Prisma.SortOrder
  middle_notes?: Prisma.SortOrderInput | Prisma.SortOrder
  base_notes?: Prisma.SortOrderInput | Prisma.SortOrder
  image_url?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  brand?: Prisma.brandsOrderByWithRelationInput
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesOrderByRelationAggregateInput
  cart_items?: Prisma.cart_itemsOrderByRelationAggregateInput
  order_items?: Prisma.order_itemsOrderByRelationAggregateInput
}

export type fragrancesWhereUniqueInput = Prisma.AtLeast<{
  id?: bigint | number
  AND?: Prisma.fragrancesWhereInput | Prisma.fragrancesWhereInput[]
  OR?: Prisma.fragrancesWhereInput[]
  NOT?: Prisma.fragrancesWhereInput | Prisma.fragrancesWhereInput[]
  brand_id?: Prisma.BigIntFilter<"fragrances"> | bigint | number
  name?: Prisma.StringFilter<"fragrances"> | string
  description?: Prisma.StringNullableFilter<"fragrances"> | string | null
  scent_family?: Prisma.StringNullableFilter<"fragrances"> | string | null
  top_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  middle_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  base_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  image_url?: Prisma.StringNullableFilter<"fragrances"> | string | null
  created_at?: Prisma.DateTimeFilter<"fragrances"> | Date | string
  brand?: Prisma.XOR<Prisma.BrandsScalarRelationFilter, Prisma.brandsWhereInput>
  fragrance_decant_prices?: Prisma.Fragrance_decant_pricesListRelationFilter
  cart_items?: Prisma.Cart_itemsListRelationFilter
  order_items?: Prisma.Order_itemsListRelationFilter
}, "id">

export type fragrancesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  scent_family?: Prisma.SortOrderInput | Prisma.SortOrder
  top_notes?: Prisma.SortOrderInput | Prisma.SortOrder
  middle_notes?: Prisma.SortOrderInput | Prisma.SortOrder
  base_notes?: Prisma.SortOrderInput | Prisma.SortOrder
  image_url?: Prisma.SortOrderInput | Prisma.SortOrder
  created_at?: Prisma.SortOrder
  _count?: Prisma.fragrancesCountOrderByAggregateInput
  _avg?: Prisma.fragrancesAvgOrderByAggregateInput
  _max?: Prisma.fragrancesMaxOrderByAggregateInput
  _min?: Prisma.fragrancesMinOrderByAggregateInput
  _sum?: Prisma.fragrancesSumOrderByAggregateInput
}

export type fragrancesScalarWhereWithAggregatesInput = {
  AND?: Prisma.fragrancesScalarWhereWithAggregatesInput | Prisma.fragrancesScalarWhereWithAggregatesInput[]
  OR?: Prisma.fragrancesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.fragrancesScalarWhereWithAggregatesInput | Prisma.fragrancesScalarWhereWithAggregatesInput[]
  id?: Prisma.BigIntWithAggregatesFilter<"fragrances"> | bigint | number
  brand_id?: Prisma.BigIntWithAggregatesFilter<"fragrances"> | bigint | number
  name?: Prisma.StringWithAggregatesFilter<"fragrances"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"fragrances"> | string | null
  scent_family?: Prisma.StringNullableWithAggregatesFilter<"fragrances"> | string | null
  top_notes?: Prisma.StringNullableWithAggregatesFilter<"fragrances"> | string | null
  middle_notes?: Prisma.StringNullableWithAggregatesFilter<"fragrances"> | string | null
  base_notes?: Prisma.StringNullableWithAggregatesFilter<"fragrances"> | string | null
  image_url?: Prisma.StringNullableWithAggregatesFilter<"fragrances"> | string | null
  created_at?: Prisma.DateTimeWithAggregatesFilter<"fragrances"> | Date | string
}

export type fragrancesCreateInput = {
  id?: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  brand: Prisma.brandsCreateNestedOneWithoutFragrancesInput
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesCreateNestedManyWithoutFragranceInput
  cart_items?: Prisma.cart_itemsCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsCreateNestedManyWithoutFragranceInput
}

export type fragrancesUncheckedCreateInput = {
  id?: bigint | number
  brand_id: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedCreateNestedManyWithoutFragranceInput
  cart_items?: Prisma.cart_itemsUncheckedCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsUncheckedCreateNestedManyWithoutFragranceInput
}

export type fragrancesUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brand?: Prisma.brandsUpdateOneRequiredWithoutFragrancesNestedInput
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUpdateManyWithoutFragranceNestedInput
  cart_items?: Prisma.cart_itemsUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUpdateManyWithoutFragranceNestedInput
}

export type fragrancesUncheckedUpdateInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  brand_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedUpdateManyWithoutFragranceNestedInput
  cart_items?: Prisma.cart_itemsUncheckedUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUncheckedUpdateManyWithoutFragranceNestedInput
}

export type fragrancesCreateManyInput = {
  id?: bigint | number
  brand_id: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
}

export type fragrancesUpdateManyMutationInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type fragrancesUncheckedUpdateManyInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  brand_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FragrancesListRelationFilter = {
  every?: Prisma.fragrancesWhereInput
  some?: Prisma.fragrancesWhereInput
  none?: Prisma.fragrancesWhereInput
}

export type fragrancesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type fragrancesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  scent_family?: Prisma.SortOrder
  top_notes?: Prisma.SortOrder
  middle_notes?: Prisma.SortOrder
  base_notes?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type fragrancesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type fragrancesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  scent_family?: Prisma.SortOrder
  top_notes?: Prisma.SortOrder
  middle_notes?: Prisma.SortOrder
  base_notes?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type fragrancesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  scent_family?: Prisma.SortOrder
  top_notes?: Prisma.SortOrder
  middle_notes?: Prisma.SortOrder
  base_notes?: Prisma.SortOrder
  image_url?: Prisma.SortOrder
  created_at?: Prisma.SortOrder
}

export type fragrancesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  brand_id?: Prisma.SortOrder
}

export type FragrancesScalarRelationFilter = {
  is?: Prisma.fragrancesWhereInput
  isNot?: Prisma.fragrancesWhereInput
}

export type fragrancesCreateNestedManyWithoutBrandInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutBrandInput, Prisma.fragrancesUncheckedCreateWithoutBrandInput> | Prisma.fragrancesCreateWithoutBrandInput[] | Prisma.fragrancesUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutBrandInput | Prisma.fragrancesCreateOrConnectWithoutBrandInput[]
  createMany?: Prisma.fragrancesCreateManyBrandInputEnvelope
  connect?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
}

export type fragrancesUncheckedCreateNestedManyWithoutBrandInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutBrandInput, Prisma.fragrancesUncheckedCreateWithoutBrandInput> | Prisma.fragrancesCreateWithoutBrandInput[] | Prisma.fragrancesUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutBrandInput | Prisma.fragrancesCreateOrConnectWithoutBrandInput[]
  createMany?: Prisma.fragrancesCreateManyBrandInputEnvelope
  connect?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
}

export type fragrancesUpdateManyWithoutBrandNestedInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutBrandInput, Prisma.fragrancesUncheckedCreateWithoutBrandInput> | Prisma.fragrancesCreateWithoutBrandInput[] | Prisma.fragrancesUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutBrandInput | Prisma.fragrancesCreateOrConnectWithoutBrandInput[]
  upsert?: Prisma.fragrancesUpsertWithWhereUniqueWithoutBrandInput | Prisma.fragrancesUpsertWithWhereUniqueWithoutBrandInput[]
  createMany?: Prisma.fragrancesCreateManyBrandInputEnvelope
  set?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  disconnect?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  delete?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  connect?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  update?: Prisma.fragrancesUpdateWithWhereUniqueWithoutBrandInput | Prisma.fragrancesUpdateWithWhereUniqueWithoutBrandInput[]
  updateMany?: Prisma.fragrancesUpdateManyWithWhereWithoutBrandInput | Prisma.fragrancesUpdateManyWithWhereWithoutBrandInput[]
  deleteMany?: Prisma.fragrancesScalarWhereInput | Prisma.fragrancesScalarWhereInput[]
}

export type fragrancesUncheckedUpdateManyWithoutBrandNestedInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutBrandInput, Prisma.fragrancesUncheckedCreateWithoutBrandInput> | Prisma.fragrancesCreateWithoutBrandInput[] | Prisma.fragrancesUncheckedCreateWithoutBrandInput[]
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutBrandInput | Prisma.fragrancesCreateOrConnectWithoutBrandInput[]
  upsert?: Prisma.fragrancesUpsertWithWhereUniqueWithoutBrandInput | Prisma.fragrancesUpsertWithWhereUniqueWithoutBrandInput[]
  createMany?: Prisma.fragrancesCreateManyBrandInputEnvelope
  set?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  disconnect?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  delete?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  connect?: Prisma.fragrancesWhereUniqueInput | Prisma.fragrancesWhereUniqueInput[]
  update?: Prisma.fragrancesUpdateWithWhereUniqueWithoutBrandInput | Prisma.fragrancesUpdateWithWhereUniqueWithoutBrandInput[]
  updateMany?: Prisma.fragrancesUpdateManyWithWhereWithoutBrandInput | Prisma.fragrancesUpdateManyWithWhereWithoutBrandInput[]
  deleteMany?: Prisma.fragrancesScalarWhereInput | Prisma.fragrancesScalarWhereInput[]
}

export type fragrancesCreateNestedOneWithoutFragrance_decant_pricesInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutFragrance_decant_pricesInput, Prisma.fragrancesUncheckedCreateWithoutFragrance_decant_pricesInput>
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutFragrance_decant_pricesInput
  connect?: Prisma.fragrancesWhereUniqueInput
}

export type fragrancesUpdateOneRequiredWithoutFragrance_decant_pricesNestedInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutFragrance_decant_pricesInput, Prisma.fragrancesUncheckedCreateWithoutFragrance_decant_pricesInput>
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutFragrance_decant_pricesInput
  upsert?: Prisma.fragrancesUpsertWithoutFragrance_decant_pricesInput
  connect?: Prisma.fragrancesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.fragrancesUpdateToOneWithWhereWithoutFragrance_decant_pricesInput, Prisma.fragrancesUpdateWithoutFragrance_decant_pricesInput>, Prisma.fragrancesUncheckedUpdateWithoutFragrance_decant_pricesInput>
}

export type fragrancesCreateNestedOneWithoutCart_itemsInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutCart_itemsInput, Prisma.fragrancesUncheckedCreateWithoutCart_itemsInput>
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutCart_itemsInput
  connect?: Prisma.fragrancesWhereUniqueInput
}

export type fragrancesUpdateOneRequiredWithoutCart_itemsNestedInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutCart_itemsInput, Prisma.fragrancesUncheckedCreateWithoutCart_itemsInput>
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutCart_itemsInput
  upsert?: Prisma.fragrancesUpsertWithoutCart_itemsInput
  connect?: Prisma.fragrancesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.fragrancesUpdateToOneWithWhereWithoutCart_itemsInput, Prisma.fragrancesUpdateWithoutCart_itemsInput>, Prisma.fragrancesUncheckedUpdateWithoutCart_itemsInput>
}

export type fragrancesCreateNestedOneWithoutOrder_itemsInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutOrder_itemsInput, Prisma.fragrancesUncheckedCreateWithoutOrder_itemsInput>
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutOrder_itemsInput
  connect?: Prisma.fragrancesWhereUniqueInput
}

export type fragrancesUpdateOneRequiredWithoutOrder_itemsNestedInput = {
  create?: Prisma.XOR<Prisma.fragrancesCreateWithoutOrder_itemsInput, Prisma.fragrancesUncheckedCreateWithoutOrder_itemsInput>
  connectOrCreate?: Prisma.fragrancesCreateOrConnectWithoutOrder_itemsInput
  upsert?: Prisma.fragrancesUpsertWithoutOrder_itemsInput
  connect?: Prisma.fragrancesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.fragrancesUpdateToOneWithWhereWithoutOrder_itemsInput, Prisma.fragrancesUpdateWithoutOrder_itemsInput>, Prisma.fragrancesUncheckedUpdateWithoutOrder_itemsInput>
}

export type fragrancesCreateWithoutBrandInput = {
  id?: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesCreateNestedManyWithoutFragranceInput
  cart_items?: Prisma.cart_itemsCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsCreateNestedManyWithoutFragranceInput
}

export type fragrancesUncheckedCreateWithoutBrandInput = {
  id?: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedCreateNestedManyWithoutFragranceInput
  cart_items?: Prisma.cart_itemsUncheckedCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsUncheckedCreateNestedManyWithoutFragranceInput
}

export type fragrancesCreateOrConnectWithoutBrandInput = {
  where: Prisma.fragrancesWhereUniqueInput
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutBrandInput, Prisma.fragrancesUncheckedCreateWithoutBrandInput>
}

export type fragrancesCreateManyBrandInputEnvelope = {
  data: Prisma.fragrancesCreateManyBrandInput | Prisma.fragrancesCreateManyBrandInput[]
  skipDuplicates?: boolean
}

export type fragrancesUpsertWithWhereUniqueWithoutBrandInput = {
  where: Prisma.fragrancesWhereUniqueInput
  update: Prisma.XOR<Prisma.fragrancesUpdateWithoutBrandInput, Prisma.fragrancesUncheckedUpdateWithoutBrandInput>
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutBrandInput, Prisma.fragrancesUncheckedCreateWithoutBrandInput>
}

export type fragrancesUpdateWithWhereUniqueWithoutBrandInput = {
  where: Prisma.fragrancesWhereUniqueInput
  data: Prisma.XOR<Prisma.fragrancesUpdateWithoutBrandInput, Prisma.fragrancesUncheckedUpdateWithoutBrandInput>
}

export type fragrancesUpdateManyWithWhereWithoutBrandInput = {
  where: Prisma.fragrancesScalarWhereInput
  data: Prisma.XOR<Prisma.fragrancesUpdateManyMutationInput, Prisma.fragrancesUncheckedUpdateManyWithoutBrandInput>
}

export type fragrancesScalarWhereInput = {
  AND?: Prisma.fragrancesScalarWhereInput | Prisma.fragrancesScalarWhereInput[]
  OR?: Prisma.fragrancesScalarWhereInput[]
  NOT?: Prisma.fragrancesScalarWhereInput | Prisma.fragrancesScalarWhereInput[]
  id?: Prisma.BigIntFilter<"fragrances"> | bigint | number
  brand_id?: Prisma.BigIntFilter<"fragrances"> | bigint | number
  name?: Prisma.StringFilter<"fragrances"> | string
  description?: Prisma.StringNullableFilter<"fragrances"> | string | null
  scent_family?: Prisma.StringNullableFilter<"fragrances"> | string | null
  top_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  middle_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  base_notes?: Prisma.StringNullableFilter<"fragrances"> | string | null
  image_url?: Prisma.StringNullableFilter<"fragrances"> | string | null
  created_at?: Prisma.DateTimeFilter<"fragrances"> | Date | string
}

export type fragrancesCreateWithoutFragrance_decant_pricesInput = {
  id?: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  brand: Prisma.brandsCreateNestedOneWithoutFragrancesInput
  cart_items?: Prisma.cart_itemsCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsCreateNestedManyWithoutFragranceInput
}

export type fragrancesUncheckedCreateWithoutFragrance_decant_pricesInput = {
  id?: bigint | number
  brand_id: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  cart_items?: Prisma.cart_itemsUncheckedCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsUncheckedCreateNestedManyWithoutFragranceInput
}

export type fragrancesCreateOrConnectWithoutFragrance_decant_pricesInput = {
  where: Prisma.fragrancesWhereUniqueInput
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutFragrance_decant_pricesInput, Prisma.fragrancesUncheckedCreateWithoutFragrance_decant_pricesInput>
}

export type fragrancesUpsertWithoutFragrance_decant_pricesInput = {
  update: Prisma.XOR<Prisma.fragrancesUpdateWithoutFragrance_decant_pricesInput, Prisma.fragrancesUncheckedUpdateWithoutFragrance_decant_pricesInput>
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutFragrance_decant_pricesInput, Prisma.fragrancesUncheckedCreateWithoutFragrance_decant_pricesInput>
  where?: Prisma.fragrancesWhereInput
}

export type fragrancesUpdateToOneWithWhereWithoutFragrance_decant_pricesInput = {
  where?: Prisma.fragrancesWhereInput
  data: Prisma.XOR<Prisma.fragrancesUpdateWithoutFragrance_decant_pricesInput, Prisma.fragrancesUncheckedUpdateWithoutFragrance_decant_pricesInput>
}

export type fragrancesUpdateWithoutFragrance_decant_pricesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brand?: Prisma.brandsUpdateOneRequiredWithoutFragrancesNestedInput
  cart_items?: Prisma.cart_itemsUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUpdateManyWithoutFragranceNestedInput
}

export type fragrancesUncheckedUpdateWithoutFragrance_decant_pricesInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  brand_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  cart_items?: Prisma.cart_itemsUncheckedUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUncheckedUpdateManyWithoutFragranceNestedInput
}

export type fragrancesCreateWithoutCart_itemsInput = {
  id?: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  brand: Prisma.brandsCreateNestedOneWithoutFragrancesInput
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsCreateNestedManyWithoutFragranceInput
}

export type fragrancesUncheckedCreateWithoutCart_itemsInput = {
  id?: bigint | number
  brand_id: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedCreateNestedManyWithoutFragranceInput
  order_items?: Prisma.order_itemsUncheckedCreateNestedManyWithoutFragranceInput
}

export type fragrancesCreateOrConnectWithoutCart_itemsInput = {
  where: Prisma.fragrancesWhereUniqueInput
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutCart_itemsInput, Prisma.fragrancesUncheckedCreateWithoutCart_itemsInput>
}

export type fragrancesUpsertWithoutCart_itemsInput = {
  update: Prisma.XOR<Prisma.fragrancesUpdateWithoutCart_itemsInput, Prisma.fragrancesUncheckedUpdateWithoutCart_itemsInput>
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutCart_itemsInput, Prisma.fragrancesUncheckedCreateWithoutCart_itemsInput>
  where?: Prisma.fragrancesWhereInput
}

export type fragrancesUpdateToOneWithWhereWithoutCart_itemsInput = {
  where?: Prisma.fragrancesWhereInput
  data: Prisma.XOR<Prisma.fragrancesUpdateWithoutCart_itemsInput, Prisma.fragrancesUncheckedUpdateWithoutCart_itemsInput>
}

export type fragrancesUpdateWithoutCart_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brand?: Prisma.brandsUpdateOneRequiredWithoutFragrancesNestedInput
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUpdateManyWithoutFragranceNestedInput
}

export type fragrancesUncheckedUpdateWithoutCart_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  brand_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUncheckedUpdateManyWithoutFragranceNestedInput
}

export type fragrancesCreateWithoutOrder_itemsInput = {
  id?: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  brand: Prisma.brandsCreateNestedOneWithoutFragrancesInput
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesCreateNestedManyWithoutFragranceInput
  cart_items?: Prisma.cart_itemsCreateNestedManyWithoutFragranceInput
}

export type fragrancesUncheckedCreateWithoutOrder_itemsInput = {
  id?: bigint | number
  brand_id: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedCreateNestedManyWithoutFragranceInput
  cart_items?: Prisma.cart_itemsUncheckedCreateNestedManyWithoutFragranceInput
}

export type fragrancesCreateOrConnectWithoutOrder_itemsInput = {
  where: Prisma.fragrancesWhereUniqueInput
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutOrder_itemsInput, Prisma.fragrancesUncheckedCreateWithoutOrder_itemsInput>
}

export type fragrancesUpsertWithoutOrder_itemsInput = {
  update: Prisma.XOR<Prisma.fragrancesUpdateWithoutOrder_itemsInput, Prisma.fragrancesUncheckedUpdateWithoutOrder_itemsInput>
  create: Prisma.XOR<Prisma.fragrancesCreateWithoutOrder_itemsInput, Prisma.fragrancesUncheckedCreateWithoutOrder_itemsInput>
  where?: Prisma.fragrancesWhereInput
}

export type fragrancesUpdateToOneWithWhereWithoutOrder_itemsInput = {
  where?: Prisma.fragrancesWhereInput
  data: Prisma.XOR<Prisma.fragrancesUpdateWithoutOrder_itemsInput, Prisma.fragrancesUncheckedUpdateWithoutOrder_itemsInput>
}

export type fragrancesUpdateWithoutOrder_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  brand?: Prisma.brandsUpdateOneRequiredWithoutFragrancesNestedInput
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUpdateManyWithoutFragranceNestedInput
  cart_items?: Prisma.cart_itemsUpdateManyWithoutFragranceNestedInput
}

export type fragrancesUncheckedUpdateWithoutOrder_itemsInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  brand_id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedUpdateManyWithoutFragranceNestedInput
  cart_items?: Prisma.cart_itemsUncheckedUpdateManyWithoutFragranceNestedInput
}

export type fragrancesCreateManyBrandInput = {
  id?: bigint | number
  name: string
  description?: string | null
  scent_family?: string | null
  top_notes?: string | null
  middle_notes?: string | null
  base_notes?: string | null
  image_url?: string | null
  created_at?: Date | string
}

export type fragrancesUpdateWithoutBrandInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUpdateManyWithoutFragranceNestedInput
  cart_items?: Prisma.cart_itemsUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUpdateManyWithoutFragranceNestedInput
}

export type fragrancesUncheckedUpdateWithoutBrandInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesUncheckedUpdateManyWithoutFragranceNestedInput
  cart_items?: Prisma.cart_itemsUncheckedUpdateManyWithoutFragranceNestedInput
  order_items?: Prisma.order_itemsUncheckedUpdateManyWithoutFragranceNestedInput
}

export type fragrancesUncheckedUpdateManyWithoutBrandInput = {
  id?: Prisma.BigIntFieldUpdateOperationsInput | bigint | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  scent_family?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  top_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  middle_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  base_notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  created_at?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type FragrancesCountOutputType
 */

export type FragrancesCountOutputType = {
  fragrance_decant_prices: number
  cart_items: number
  order_items: number
}

export type FragrancesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  fragrance_decant_prices?: boolean | FragrancesCountOutputTypeCountFragrance_decant_pricesArgs
  cart_items?: boolean | FragrancesCountOutputTypeCountCart_itemsArgs
  order_items?: boolean | FragrancesCountOutputTypeCountOrder_itemsArgs
}

/**
 * FragrancesCountOutputType without action
 */
export type FragrancesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FragrancesCountOutputType
   */
  select?: Prisma.FragrancesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * FragrancesCountOutputType without action
 */
export type FragrancesCountOutputTypeCountFragrance_decant_pricesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.fragrance_decant_pricesWhereInput
}

/**
 * FragrancesCountOutputType without action
 */
export type FragrancesCountOutputTypeCountCart_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.cart_itemsWhereInput
}

/**
 * FragrancesCountOutputType without action
 */
export type FragrancesCountOutputTypeCountOrder_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.order_itemsWhereInput
}


export type fragrancesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  scent_family?: boolean
  top_notes?: boolean
  middle_notes?: boolean
  base_notes?: boolean
  image_url?: boolean
  created_at?: boolean
  brand?: boolean | Prisma.brandsDefaultArgs<ExtArgs>
  fragrance_decant_prices?: boolean | Prisma.fragrances$fragrance_decant_pricesArgs<ExtArgs>
  cart_items?: boolean | Prisma.fragrances$cart_itemsArgs<ExtArgs>
  order_items?: boolean | Prisma.fragrances$order_itemsArgs<ExtArgs>
  _count?: boolean | Prisma.FragrancesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragrances"]>

export type fragrancesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  scent_family?: boolean
  top_notes?: boolean
  middle_notes?: boolean
  base_notes?: boolean
  image_url?: boolean
  created_at?: boolean
  brand?: boolean | Prisma.brandsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragrances"]>

export type fragrancesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  scent_family?: boolean
  top_notes?: boolean
  middle_notes?: boolean
  base_notes?: boolean
  image_url?: boolean
  created_at?: boolean
  brand?: boolean | Prisma.brandsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["fragrances"]>

export type fragrancesSelectScalar = {
  id?: boolean
  brand_id?: boolean
  name?: boolean
  description?: boolean
  scent_family?: boolean
  top_notes?: boolean
  middle_notes?: boolean
  base_notes?: boolean
  image_url?: boolean
  created_at?: boolean
}

export type fragrancesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "brand_id" | "name" | "description" | "scent_family" | "top_notes" | "middle_notes" | "base_notes" | "image_url" | "created_at", ExtArgs["result"]["fragrances"]>
export type fragrancesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.brandsDefaultArgs<ExtArgs>
  fragrance_decant_prices?: boolean | Prisma.fragrances$fragrance_decant_pricesArgs<ExtArgs>
  cart_items?: boolean | Prisma.fragrances$cart_itemsArgs<ExtArgs>
  order_items?: boolean | Prisma.fragrances$order_itemsArgs<ExtArgs>
  _count?: boolean | Prisma.FragrancesCountOutputTypeDefaultArgs<ExtArgs>
}
export type fragrancesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.brandsDefaultArgs<ExtArgs>
}
export type fragrancesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  brand?: boolean | Prisma.brandsDefaultArgs<ExtArgs>
}

export type $fragrancesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "fragrances"
  objects: {
    brand: Prisma.$brandsPayload<ExtArgs>
    fragrance_decant_prices: Prisma.$fragrance_decant_pricesPayload<ExtArgs>[]
    cart_items: Prisma.$cart_itemsPayload<ExtArgs>[]
    order_items: Prisma.$order_itemsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: bigint
    brand_id: bigint
    name: string
    description: string | null
    scent_family: string | null
    top_notes: string | null
    middle_notes: string | null
    base_notes: string | null
    image_url: string | null
    created_at: Date
  }, ExtArgs["result"]["fragrances"]>
  composites: {}
}

export type fragrancesGetPayload<S extends boolean | null | undefined | fragrancesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$fragrancesPayload, S>

export type fragrancesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<fragrancesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FragrancesCountAggregateInputType | true
  }

export interface fragrancesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fragrances'], meta: { name: 'fragrances' } }
  /**
   * Find zero or one Fragrances that matches the filter.
   * @param {fragrancesFindUniqueArgs} args - Arguments to find a Fragrances
   * @example
   * // Get one Fragrances
   * const fragrances = await prisma.fragrances.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends fragrancesFindUniqueArgs>(args: Prisma.SelectSubset<T, fragrancesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Fragrances that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {fragrancesFindUniqueOrThrowArgs} args - Arguments to find a Fragrances
   * @example
   * // Get one Fragrances
   * const fragrances = await prisma.fragrances.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends fragrancesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, fragrancesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fragrances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrancesFindFirstArgs} args - Arguments to find a Fragrances
   * @example
   * // Get one Fragrances
   * const fragrances = await prisma.fragrances.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends fragrancesFindFirstArgs>(args?: Prisma.SelectSubset<T, fragrancesFindFirstArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Fragrances that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrancesFindFirstOrThrowArgs} args - Arguments to find a Fragrances
   * @example
   * // Get one Fragrances
   * const fragrances = await prisma.fragrances.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends fragrancesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, fragrancesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Fragrances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrancesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Fragrances
   * const fragrances = await prisma.fragrances.findMany()
   * 
   * // Get first 10 Fragrances
   * const fragrances = await prisma.fragrances.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fragrancesWithIdOnly = await prisma.fragrances.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends fragrancesFindManyArgs>(args?: Prisma.SelectSubset<T, fragrancesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Fragrances.
   * @param {fragrancesCreateArgs} args - Arguments to create a Fragrances.
   * @example
   * // Create one Fragrances
   * const Fragrances = await prisma.fragrances.create({
   *   data: {
   *     // ... data to create a Fragrances
   *   }
   * })
   * 
   */
  create<T extends fragrancesCreateArgs>(args: Prisma.SelectSubset<T, fragrancesCreateArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Fragrances.
   * @param {fragrancesCreateManyArgs} args - Arguments to create many Fragrances.
   * @example
   * // Create many Fragrances
   * const fragrances = await prisma.fragrances.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends fragrancesCreateManyArgs>(args?: Prisma.SelectSubset<T, fragrancesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Fragrances and returns the data saved in the database.
   * @param {fragrancesCreateManyAndReturnArgs} args - Arguments to create many Fragrances.
   * @example
   * // Create many Fragrances
   * const fragrances = await prisma.fragrances.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Fragrances and only return the `id`
   * const fragrancesWithIdOnly = await prisma.fragrances.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends fragrancesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, fragrancesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Fragrances.
   * @param {fragrancesDeleteArgs} args - Arguments to delete one Fragrances.
   * @example
   * // Delete one Fragrances
   * const Fragrances = await prisma.fragrances.delete({
   *   where: {
   *     // ... filter to delete one Fragrances
   *   }
   * })
   * 
   */
  delete<T extends fragrancesDeleteArgs>(args: Prisma.SelectSubset<T, fragrancesDeleteArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Fragrances.
   * @param {fragrancesUpdateArgs} args - Arguments to update one Fragrances.
   * @example
   * // Update one Fragrances
   * const fragrances = await prisma.fragrances.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends fragrancesUpdateArgs>(args: Prisma.SelectSubset<T, fragrancesUpdateArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Fragrances.
   * @param {fragrancesDeleteManyArgs} args - Arguments to filter Fragrances to delete.
   * @example
   * // Delete a few Fragrances
   * const { count } = await prisma.fragrances.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends fragrancesDeleteManyArgs>(args?: Prisma.SelectSubset<T, fragrancesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fragrances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrancesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Fragrances
   * const fragrances = await prisma.fragrances.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends fragrancesUpdateManyArgs>(args: Prisma.SelectSubset<T, fragrancesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Fragrances and returns the data updated in the database.
   * @param {fragrancesUpdateManyAndReturnArgs} args - Arguments to update many Fragrances.
   * @example
   * // Update many Fragrances
   * const fragrances = await prisma.fragrances.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Fragrances and only return the `id`
   * const fragrancesWithIdOnly = await prisma.fragrances.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends fragrancesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, fragrancesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Fragrances.
   * @param {fragrancesUpsertArgs} args - Arguments to update or create a Fragrances.
   * @example
   * // Update or create a Fragrances
   * const fragrances = await prisma.fragrances.upsert({
   *   create: {
   *     // ... data to create a Fragrances
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Fragrances we want to update
   *   }
   * })
   */
  upsert<T extends fragrancesUpsertArgs>(args: Prisma.SelectSubset<T, fragrancesUpsertArgs<ExtArgs>>): Prisma.Prisma__fragrancesClient<runtime.Types.Result.GetResult<Prisma.$fragrancesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Fragrances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrancesCountArgs} args - Arguments to filter Fragrances to count.
   * @example
   * // Count the number of Fragrances
   * const count = await prisma.fragrances.count({
   *   where: {
   *     // ... the filter for the Fragrances we want to count
   *   }
   * })
  **/
  count<T extends fragrancesCountArgs>(
    args?: Prisma.Subset<T, fragrancesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FragrancesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Fragrances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FragrancesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FragrancesAggregateArgs>(args: Prisma.Subset<T, FragrancesAggregateArgs>): Prisma.PrismaPromise<GetFragrancesAggregateType<T>>

  /**
   * Group by Fragrances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {fragrancesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends fragrancesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: fragrancesGroupByArgs['orderBy'] }
      : { orderBy?: fragrancesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, fragrancesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFragrancesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the fragrances model
 */
readonly fields: fragrancesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for fragrances.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__fragrancesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  brand<T extends Prisma.brandsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.brandsDefaultArgs<ExtArgs>>): Prisma.Prisma__brandsClient<runtime.Types.Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  fragrance_decant_prices<T extends Prisma.fragrances$fragrance_decant_pricesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.fragrances$fragrance_decant_pricesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$fragrance_decant_pricesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  cart_items<T extends Prisma.fragrances$cart_itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.fragrances$cart_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$cart_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  order_items<T extends Prisma.fragrances$order_itemsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.fragrances$order_itemsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$order_itemsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the fragrances model
 */
export interface fragrancesFieldRefs {
  readonly id: Prisma.FieldRef<"fragrances", 'BigInt'>
  readonly brand_id: Prisma.FieldRef<"fragrances", 'BigInt'>
  readonly name: Prisma.FieldRef<"fragrances", 'String'>
  readonly description: Prisma.FieldRef<"fragrances", 'String'>
  readonly scent_family: Prisma.FieldRef<"fragrances", 'String'>
  readonly top_notes: Prisma.FieldRef<"fragrances", 'String'>
  readonly middle_notes: Prisma.FieldRef<"fragrances", 'String'>
  readonly base_notes: Prisma.FieldRef<"fragrances", 'String'>
  readonly image_url: Prisma.FieldRef<"fragrances", 'String'>
  readonly created_at: Prisma.FieldRef<"fragrances", 'DateTime'>
}
    

// Custom InputTypes
/**
 * fragrances findUnique
 */
export type fragrancesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * Filter, which fragrances to fetch.
   */
  where: Prisma.fragrancesWhereUniqueInput
}

/**
 * fragrances findUniqueOrThrow
 */
export type fragrancesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * Filter, which fragrances to fetch.
   */
  where: Prisma.fragrancesWhereUniqueInput
}

/**
 * fragrances findFirst
 */
export type fragrancesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * Filter, which fragrances to fetch.
   */
  where?: Prisma.fragrancesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrances to fetch.
   */
  orderBy?: Prisma.fragrancesOrderByWithRelationInput | Prisma.fragrancesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for fragrances.
   */
  cursor?: Prisma.fragrancesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of fragrances.
   */
  distinct?: Prisma.FragrancesScalarFieldEnum | Prisma.FragrancesScalarFieldEnum[]
}

/**
 * fragrances findFirstOrThrow
 */
export type fragrancesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * Filter, which fragrances to fetch.
   */
  where?: Prisma.fragrancesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrances to fetch.
   */
  orderBy?: Prisma.fragrancesOrderByWithRelationInput | Prisma.fragrancesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for fragrances.
   */
  cursor?: Prisma.fragrancesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of fragrances.
   */
  distinct?: Prisma.FragrancesScalarFieldEnum | Prisma.FragrancesScalarFieldEnum[]
}

/**
 * fragrances findMany
 */
export type fragrancesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * Filter, which fragrances to fetch.
   */
  where?: Prisma.fragrancesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of fragrances to fetch.
   */
  orderBy?: Prisma.fragrancesOrderByWithRelationInput | Prisma.fragrancesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing fragrances.
   */
  cursor?: Prisma.fragrancesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` fragrances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` fragrances.
   */
  skip?: number
  distinct?: Prisma.FragrancesScalarFieldEnum | Prisma.FragrancesScalarFieldEnum[]
}

/**
 * fragrances create
 */
export type fragrancesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * The data needed to create a fragrances.
   */
  data: Prisma.XOR<Prisma.fragrancesCreateInput, Prisma.fragrancesUncheckedCreateInput>
}

/**
 * fragrances createMany
 */
export type fragrancesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many fragrances.
   */
  data: Prisma.fragrancesCreateManyInput | Prisma.fragrancesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * fragrances createManyAndReturn
 */
export type fragrancesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * The data used to create many fragrances.
   */
  data: Prisma.fragrancesCreateManyInput | Prisma.fragrancesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * fragrances update
 */
export type fragrancesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * The data needed to update a fragrances.
   */
  data: Prisma.XOR<Prisma.fragrancesUpdateInput, Prisma.fragrancesUncheckedUpdateInput>
  /**
   * Choose, which fragrances to update.
   */
  where: Prisma.fragrancesWhereUniqueInput
}

/**
 * fragrances updateMany
 */
export type fragrancesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update fragrances.
   */
  data: Prisma.XOR<Prisma.fragrancesUpdateManyMutationInput, Prisma.fragrancesUncheckedUpdateManyInput>
  /**
   * Filter which fragrances to update
   */
  where?: Prisma.fragrancesWhereInput
  /**
   * Limit how many fragrances to update.
   */
  limit?: number
}

/**
 * fragrances updateManyAndReturn
 */
export type fragrancesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * The data used to update fragrances.
   */
  data: Prisma.XOR<Prisma.fragrancesUpdateManyMutationInput, Prisma.fragrancesUncheckedUpdateManyInput>
  /**
   * Filter which fragrances to update
   */
  where?: Prisma.fragrancesWhereInput
  /**
   * Limit how many fragrances to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * fragrances upsert
 */
export type fragrancesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * The filter to search for the fragrances to update in case it exists.
   */
  where: Prisma.fragrancesWhereUniqueInput
  /**
   * In case the fragrances found by the `where` argument doesn't exist, create a new fragrances with this data.
   */
  create: Prisma.XOR<Prisma.fragrancesCreateInput, Prisma.fragrancesUncheckedCreateInput>
  /**
   * In case the fragrances was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.fragrancesUpdateInput, Prisma.fragrancesUncheckedUpdateInput>
}

/**
 * fragrances delete
 */
export type fragrancesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
  /**
   * Filter which fragrances to delete.
   */
  where: Prisma.fragrancesWhereUniqueInput
}

/**
 * fragrances deleteMany
 */
export type fragrancesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which fragrances to delete
   */
  where?: Prisma.fragrancesWhereInput
  /**
   * Limit how many fragrances to delete.
   */
  limit?: number
}

/**
 * fragrances.fragrance_decant_prices
 */
export type fragrances$fragrance_decant_pricesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrance_decant_prices
   */
  select?: Prisma.fragrance_decant_pricesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrance_decant_prices
   */
  omit?: Prisma.fragrance_decant_pricesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrance_decant_pricesInclude<ExtArgs> | null
  where?: Prisma.fragrance_decant_pricesWhereInput
  orderBy?: Prisma.fragrance_decant_pricesOrderByWithRelationInput | Prisma.fragrance_decant_pricesOrderByWithRelationInput[]
  cursor?: Prisma.fragrance_decant_pricesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Fragrance_decant_pricesScalarFieldEnum | Prisma.Fragrance_decant_pricesScalarFieldEnum[]
}

/**
 * fragrances.cart_items
 */
export type fragrances$cart_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the cart_items
   */
  select?: Prisma.cart_itemsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the cart_items
   */
  omit?: Prisma.cart_itemsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.cart_itemsInclude<ExtArgs> | null
  where?: Prisma.cart_itemsWhereInput
  orderBy?: Prisma.cart_itemsOrderByWithRelationInput | Prisma.cart_itemsOrderByWithRelationInput[]
  cursor?: Prisma.cart_itemsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Cart_itemsScalarFieldEnum | Prisma.Cart_itemsScalarFieldEnum[]
}

/**
 * fragrances.order_items
 */
export type fragrances$order_itemsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the order_items
   */
  select?: Prisma.order_itemsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the order_items
   */
  omit?: Prisma.order_itemsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.order_itemsInclude<ExtArgs> | null
  where?: Prisma.order_itemsWhereInput
  orderBy?: Prisma.order_itemsOrderByWithRelationInput | Prisma.order_itemsOrderByWithRelationInput[]
  cursor?: Prisma.order_itemsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Order_itemsScalarFieldEnum | Prisma.Order_itemsScalarFieldEnum[]
}

/**
 * fragrances without action
 */
export type fragrancesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the fragrances
   */
  select?: Prisma.fragrancesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the fragrances
   */
  omit?: Prisma.fragrancesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.fragrancesInclude<ExtArgs> | null
}
