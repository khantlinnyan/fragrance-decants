
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
export const prismaVersion: PrismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  users: 'users',
  brands: 'brands',
  fragrances: 'fragrances',
  decant_sizes: 'decant_sizes',
  fragrance_decant_prices: 'fragrance_decant_prices',
  cart_items: 'cart_items',
  orders: 'orders',
  order_items: 'order_items',
  guest_orders: 'guest_orders',
  guest_order_items: 'guest_order_items',
  cart_sessions: 'cart_sessions',
  guest_cart_items: 'guest_cart_items'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "users" | "brands" | "fragrances" | "decant_sizes" | "fragrance_decant_prices" | "cart_items" | "orders" | "order_items" | "guest_orders" | "guest_order_items" | "cart_sessions" | "guest_cart_items"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    users: {
      payload: Prisma.$usersPayload<ExtArgs>
      fields: Prisma.usersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.usersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>
        }
        findFirst: {
          args: Prisma.usersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>
        }
        findMany: {
          args: Prisma.usersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>[]
        }
        create: {
          args: Prisma.usersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>
        }
        createMany: {
          args: Prisma.usersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>[]
        }
        delete: {
          args: Prisma.usersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>
        }
        update: {
          args: Prisma.usersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>
        }
        deleteMany: {
          args: Prisma.usersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.usersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>[]
        }
        upsert: {
          args: Prisma.usersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$usersPayload>
        }
        aggregate: {
          args: Prisma.UsersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUsers>
        }
        groupBy: {
          args: Prisma.usersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UsersGroupByOutputType>[]
        }
        count: {
          args: Prisma.usersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UsersCountAggregateOutputType> | number
        }
      }
    }
    brands: {
      payload: Prisma.$brandsPayload<ExtArgs>
      fields: Prisma.brandsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.brandsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.brandsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        findFirst: {
          args: Prisma.brandsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.brandsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        findMany: {
          args: Prisma.brandsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>[]
        }
        create: {
          args: Prisma.brandsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        createMany: {
          args: Prisma.brandsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.brandsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>[]
        }
        delete: {
          args: Prisma.brandsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        update: {
          args: Prisma.brandsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        deleteMany: {
          args: Prisma.brandsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.brandsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.brandsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>[]
        }
        upsert: {
          args: Prisma.brandsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$brandsPayload>
        }
        aggregate: {
          args: Prisma.BrandsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateBrands>
        }
        groupBy: {
          args: Prisma.brandsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BrandsGroupByOutputType>[]
        }
        count: {
          args: Prisma.brandsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.BrandsCountAggregateOutputType> | number
        }
      }
    }
    fragrances: {
      payload: Prisma.$fragrancesPayload<ExtArgs>
      fields: Prisma.fragrancesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.fragrancesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.fragrancesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>
        }
        findFirst: {
          args: Prisma.fragrancesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.fragrancesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>
        }
        findMany: {
          args: Prisma.fragrancesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>[]
        }
        create: {
          args: Prisma.fragrancesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>
        }
        createMany: {
          args: Prisma.fragrancesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.fragrancesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>[]
        }
        delete: {
          args: Prisma.fragrancesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>
        }
        update: {
          args: Prisma.fragrancesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>
        }
        deleteMany: {
          args: Prisma.fragrancesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.fragrancesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.fragrancesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>[]
        }
        upsert: {
          args: Prisma.fragrancesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrancesPayload>
        }
        aggregate: {
          args: Prisma.FragrancesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFragrances>
        }
        groupBy: {
          args: Prisma.fragrancesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FragrancesGroupByOutputType>[]
        }
        count: {
          args: Prisma.fragrancesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.FragrancesCountAggregateOutputType> | number
        }
      }
    }
    decant_sizes: {
      payload: Prisma.$decant_sizesPayload<ExtArgs>
      fields: Prisma.decant_sizesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.decant_sizesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.decant_sizesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>
        }
        findFirst: {
          args: Prisma.decant_sizesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.decant_sizesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>
        }
        findMany: {
          args: Prisma.decant_sizesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>[]
        }
        create: {
          args: Prisma.decant_sizesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>
        }
        createMany: {
          args: Prisma.decant_sizesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.decant_sizesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>[]
        }
        delete: {
          args: Prisma.decant_sizesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>
        }
        update: {
          args: Prisma.decant_sizesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>
        }
        deleteMany: {
          args: Prisma.decant_sizesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.decant_sizesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.decant_sizesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>[]
        }
        upsert: {
          args: Prisma.decant_sizesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$decant_sizesPayload>
        }
        aggregate: {
          args: Prisma.Decant_sizesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDecant_sizes>
        }
        groupBy: {
          args: Prisma.decant_sizesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Decant_sizesGroupByOutputType>[]
        }
        count: {
          args: Prisma.decant_sizesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Decant_sizesCountAggregateOutputType> | number
        }
      }
    }
    fragrance_decant_prices: {
      payload: Prisma.$fragrance_decant_pricesPayload<ExtArgs>
      fields: Prisma.fragrance_decant_pricesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.fragrance_decant_pricesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.fragrance_decant_pricesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>
        }
        findFirst: {
          args: Prisma.fragrance_decant_pricesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.fragrance_decant_pricesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>
        }
        findMany: {
          args: Prisma.fragrance_decant_pricesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>[]
        }
        create: {
          args: Prisma.fragrance_decant_pricesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>
        }
        createMany: {
          args: Prisma.fragrance_decant_pricesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.fragrance_decant_pricesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>[]
        }
        delete: {
          args: Prisma.fragrance_decant_pricesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>
        }
        update: {
          args: Prisma.fragrance_decant_pricesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>
        }
        deleteMany: {
          args: Prisma.fragrance_decant_pricesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.fragrance_decant_pricesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.fragrance_decant_pricesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>[]
        }
        upsert: {
          args: Prisma.fragrance_decant_pricesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$fragrance_decant_pricesPayload>
        }
        aggregate: {
          args: Prisma.Fragrance_decant_pricesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateFragrance_decant_prices>
        }
        groupBy: {
          args: Prisma.fragrance_decant_pricesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Fragrance_decant_pricesGroupByOutputType>[]
        }
        count: {
          args: Prisma.fragrance_decant_pricesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Fragrance_decant_pricesCountAggregateOutputType> | number
        }
      }
    }
    cart_items: {
      payload: Prisma.$cart_itemsPayload<ExtArgs>
      fields: Prisma.cart_itemsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.cart_itemsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.cart_itemsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>
        }
        findFirst: {
          args: Prisma.cart_itemsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.cart_itemsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>
        }
        findMany: {
          args: Prisma.cart_itemsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>[]
        }
        create: {
          args: Prisma.cart_itemsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>
        }
        createMany: {
          args: Prisma.cart_itemsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.cart_itemsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>[]
        }
        delete: {
          args: Prisma.cart_itemsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>
        }
        update: {
          args: Prisma.cart_itemsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>
        }
        deleteMany: {
          args: Prisma.cart_itemsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.cart_itemsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.cart_itemsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>[]
        }
        upsert: {
          args: Prisma.cart_itemsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_itemsPayload>
        }
        aggregate: {
          args: Prisma.Cart_itemsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCart_items>
        }
        groupBy: {
          args: Prisma.cart_itemsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Cart_itemsGroupByOutputType>[]
        }
        count: {
          args: Prisma.cart_itemsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Cart_itemsCountAggregateOutputType> | number
        }
      }
    }
    orders: {
      payload: Prisma.$ordersPayload<ExtArgs>
      fields: Prisma.ordersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ordersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>
        }
        findFirst: {
          args: Prisma.ordersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>
        }
        findMany: {
          args: Prisma.ordersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>[]
        }
        create: {
          args: Prisma.ordersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>
        }
        createMany: {
          args: Prisma.ordersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ordersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>[]
        }
        delete: {
          args: Prisma.ordersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>
        }
        update: {
          args: Prisma.ordersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>
        }
        deleteMany: {
          args: Prisma.ordersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ordersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ordersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>[]
        }
        upsert: {
          args: Prisma.ordersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ordersPayload>
        }
        aggregate: {
          args: Prisma.OrdersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrders>
        }
        groupBy: {
          args: Prisma.ordersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrdersGroupByOutputType>[]
        }
        count: {
          args: Prisma.ordersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.OrdersCountAggregateOutputType> | number
        }
      }
    }
    order_items: {
      payload: Prisma.$order_itemsPayload<ExtArgs>
      fields: Prisma.order_itemsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.order_itemsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.order_itemsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>
        }
        findFirst: {
          args: Prisma.order_itemsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.order_itemsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>
        }
        findMany: {
          args: Prisma.order_itemsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
        }
        create: {
          args: Prisma.order_itemsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>
        }
        createMany: {
          args: Prisma.order_itemsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.order_itemsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
        }
        delete: {
          args: Prisma.order_itemsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>
        }
        update: {
          args: Prisma.order_itemsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>
        }
        deleteMany: {
          args: Prisma.order_itemsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.order_itemsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.order_itemsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>[]
        }
        upsert: {
          args: Prisma.order_itemsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$order_itemsPayload>
        }
        aggregate: {
          args: Prisma.Order_itemsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateOrder_items>
        }
        groupBy: {
          args: Prisma.order_itemsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Order_itemsGroupByOutputType>[]
        }
        count: {
          args: Prisma.order_itemsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Order_itemsCountAggregateOutputType> | number
        }
      }
    }
    guest_orders: {
      payload: Prisma.$guest_ordersPayload<ExtArgs>
      fields: Prisma.guest_ordersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.guest_ordersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.guest_ordersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>
        }
        findFirst: {
          args: Prisma.guest_ordersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.guest_ordersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>
        }
        findMany: {
          args: Prisma.guest_ordersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>[]
        }
        create: {
          args: Prisma.guest_ordersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>
        }
        createMany: {
          args: Prisma.guest_ordersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.guest_ordersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>[]
        }
        delete: {
          args: Prisma.guest_ordersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>
        }
        update: {
          args: Prisma.guest_ordersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>
        }
        deleteMany: {
          args: Prisma.guest_ordersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.guest_ordersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.guest_ordersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>[]
        }
        upsert: {
          args: Prisma.guest_ordersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_ordersPayload>
        }
        aggregate: {
          args: Prisma.Guest_ordersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGuest_orders>
        }
        groupBy: {
          args: Prisma.guest_ordersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Guest_ordersGroupByOutputType>[]
        }
        count: {
          args: Prisma.guest_ordersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Guest_ordersCountAggregateOutputType> | number
        }
      }
    }
    guest_order_items: {
      payload: Prisma.$guest_order_itemsPayload<ExtArgs>
      fields: Prisma.guest_order_itemsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.guest_order_itemsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.guest_order_itemsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>
        }
        findFirst: {
          args: Prisma.guest_order_itemsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.guest_order_itemsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>
        }
        findMany: {
          args: Prisma.guest_order_itemsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>[]
        }
        create: {
          args: Prisma.guest_order_itemsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>
        }
        createMany: {
          args: Prisma.guest_order_itemsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.guest_order_itemsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>[]
        }
        delete: {
          args: Prisma.guest_order_itemsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>
        }
        update: {
          args: Prisma.guest_order_itemsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>
        }
        deleteMany: {
          args: Prisma.guest_order_itemsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.guest_order_itemsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.guest_order_itemsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>[]
        }
        upsert: {
          args: Prisma.guest_order_itemsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_order_itemsPayload>
        }
        aggregate: {
          args: Prisma.Guest_order_itemsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGuest_order_items>
        }
        groupBy: {
          args: Prisma.guest_order_itemsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Guest_order_itemsGroupByOutputType>[]
        }
        count: {
          args: Prisma.guest_order_itemsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Guest_order_itemsCountAggregateOutputType> | number
        }
      }
    }
    cart_sessions: {
      payload: Prisma.$cart_sessionsPayload<ExtArgs>
      fields: Prisma.cart_sessionsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.cart_sessionsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.cart_sessionsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>
        }
        findFirst: {
          args: Prisma.cart_sessionsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.cart_sessionsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>
        }
        findMany: {
          args: Prisma.cart_sessionsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>[]
        }
        create: {
          args: Prisma.cart_sessionsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>
        }
        createMany: {
          args: Prisma.cart_sessionsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.cart_sessionsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>[]
        }
        delete: {
          args: Prisma.cart_sessionsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>
        }
        update: {
          args: Prisma.cart_sessionsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>
        }
        deleteMany: {
          args: Prisma.cart_sessionsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.cart_sessionsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.cart_sessionsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>[]
        }
        upsert: {
          args: Prisma.cart_sessionsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cart_sessionsPayload>
        }
        aggregate: {
          args: Prisma.Cart_sessionsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCart_sessions>
        }
        groupBy: {
          args: Prisma.cart_sessionsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Cart_sessionsGroupByOutputType>[]
        }
        count: {
          args: Prisma.cart_sessionsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Cart_sessionsCountAggregateOutputType> | number
        }
      }
    }
    guest_cart_items: {
      payload: Prisma.$guest_cart_itemsPayload<ExtArgs>
      fields: Prisma.guest_cart_itemsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.guest_cart_itemsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.guest_cart_itemsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>
        }
        findFirst: {
          args: Prisma.guest_cart_itemsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.guest_cart_itemsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>
        }
        findMany: {
          args: Prisma.guest_cart_itemsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>[]
        }
        create: {
          args: Prisma.guest_cart_itemsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>
        }
        createMany: {
          args: Prisma.guest_cart_itemsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.guest_cart_itemsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>[]
        }
        delete: {
          args: Prisma.guest_cart_itemsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>
        }
        update: {
          args: Prisma.guest_cart_itemsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>
        }
        deleteMany: {
          args: Prisma.guest_cart_itemsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.guest_cart_itemsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.guest_cart_itemsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>[]
        }
        upsert: {
          args: Prisma.guest_cart_itemsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$guest_cart_itemsPayload>
        }
        aggregate: {
          args: Prisma.Guest_cart_itemsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGuest_cart_items>
        }
        groupBy: {
          args: Prisma.guest_cart_itemsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Guest_cart_itemsGroupByOutputType>[]
        }
        count: {
          args: Prisma.guest_cart_itemsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Guest_cart_itemsCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  created_at: 'created_at',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  city: 'city',
  state_province: 'state_province',
  postal_code: 'postal_code',
  country: 'country',
  phone: 'phone'
} as const

export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


export const BrandsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
} as const

export type BrandsScalarFieldEnum = (typeof BrandsScalarFieldEnum)[keyof typeof BrandsScalarFieldEnum]


export const FragrancesScalarFieldEnum = {
  id: 'id',
  brand_id: 'brand_id',
  name: 'name',
  description: 'description',
  scent_family: 'scent_family',
  top_notes: 'top_notes',
  middle_notes: 'middle_notes',
  base_notes: 'base_notes',
  image_url: 'image_url',
  created_at: 'created_at'
} as const

export type FragrancesScalarFieldEnum = (typeof FragrancesScalarFieldEnum)[keyof typeof FragrancesScalarFieldEnum]


export const Decant_sizesScalarFieldEnum = {
  id: 'id',
  size_ml: 'size_ml',
  label: 'label'
} as const

export type Decant_sizesScalarFieldEnum = (typeof Decant_sizesScalarFieldEnum)[keyof typeof Decant_sizesScalarFieldEnum]


export const Fragrance_decant_pricesScalarFieldEnum = {
  id: 'id',
  fragrance_id: 'fragrance_id',
  decant_size_id: 'decant_size_id',
  price: 'price'
} as const

export type Fragrance_decant_pricesScalarFieldEnum = (typeof Fragrance_decant_pricesScalarFieldEnum)[keyof typeof Fragrance_decant_pricesScalarFieldEnum]


export const Cart_itemsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  fragrance_id: 'fragrance_id',
  decant_size_id: 'decant_size_id',
  quantity: 'quantity',
  created_at: 'created_at'
} as const

export type Cart_itemsScalarFieldEnum = (typeof Cart_itemsScalarFieldEnum)[keyof typeof Cart_itemsScalarFieldEnum]


export const OrdersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  total_amount: 'total_amount',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


export const Order_itemsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  fragrance_id: 'fragrance_id',
  decant_size_id: 'decant_size_id',
  quantity: 'quantity',
  price_per_item: 'price_per_item'
} as const

export type Order_itemsScalarFieldEnum = (typeof Order_itemsScalarFieldEnum)[keyof typeof Order_itemsScalarFieldEnum]


export const Guest_ordersScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  email: 'email',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  city: 'city',
  state_province: 'state_province',
  postal_code: 'postal_code',
  country: 'country',
  phone: 'phone',
  total_amount: 'total_amount',
  status: 'status',
  save_details_for_account: 'save_details_for_account',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Guest_ordersScalarFieldEnum = (typeof Guest_ordersScalarFieldEnum)[keyof typeof Guest_ordersScalarFieldEnum]


export const Guest_order_itemsScalarFieldEnum = {
  id: 'id',
  guest_order_id: 'guest_order_id',
  fragrance_id: 'fragrance_id',
  decant_size_id: 'decant_size_id',
  quantity: 'quantity',
  price_per_item: 'price_per_item'
} as const

export type Guest_order_itemsScalarFieldEnum = (typeof Guest_order_itemsScalarFieldEnum)[keyof typeof Guest_order_itemsScalarFieldEnum]


export const Cart_sessionsScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
} as const

export type Cart_sessionsScalarFieldEnum = (typeof Cart_sessionsScalarFieldEnum)[keyof typeof Cart_sessionsScalarFieldEnum]


export const Guest_cart_itemsScalarFieldEnum = {
  id: 'id',
  session_id: 'session_id',
  cart_session_id: 'cart_session_id',
  fragrance_id: 'fragrance_id',
  decant_size_id: 'decant_size_id',
  quantity: 'quantity',
  created_at: 'created_at'
} as const

export type Guest_cart_itemsScalarFieldEnum = (typeof Guest_cart_itemsScalarFieldEnum)[keyof typeof Guest_cart_itemsScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'BigInt'
 */
export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


/**
 * Reference to a field of type 'BigInt[]'
 */
export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  users?: Prisma.usersOmit
  brands?: Prisma.brandsOmit
  fragrances?: Prisma.fragrancesOmit
  decant_sizes?: Prisma.decant_sizesOmit
  fragrance_decant_prices?: Prisma.fragrance_decant_pricesOmit
  cart_items?: Prisma.cart_itemsOmit
  orders?: Prisma.ordersOmit
  order_items?: Prisma.order_itemsOmit
  guest_orders?: Prisma.guest_ordersOmit
  guest_order_items?: Prisma.guest_order_itemsOmit
  cart_sessions?: Prisma.cart_sessionsOmit
  guest_cart_items?: Prisma.guest_cart_itemsOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

